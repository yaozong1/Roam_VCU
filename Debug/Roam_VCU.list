
Roam_VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000223c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002420  08002420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002478  08002478  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002480  08002480  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002494  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002494  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008264  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001918  00000000  00000000  00028299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  00029bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eca7  00000000  00000000  0002a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000085cc  00000000  00000000  00049657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b65e7  00000000  00000000  00051c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010820a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  0010825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002408 	.word	0x08002408

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002408 	.word	0x08002408

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TxHeader.StdId = 0x01;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <main+0x38>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;                 // 数据长度�??????? 8 字节
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <main+0x38>)
 8000538:	2208      	movs	r2, #8
 800053a:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;        // 使用标准标识�???????
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <main+0x38>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;      // 数据�???????
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <main+0x38>)
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 f992 	bl	8000870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f80e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f88a 	bl	8000668 <MX_GPIO_Init>
//  MX_CAN1_Init();
//  MX_TIM1_Init();
//  MX_USART2_UART_Init();
  MX_RTC_Init();
 8000554:	f000 f86c 	bl	8000630 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <main+0x3c>)
 800055e:	f000 fe7d 	bl	800125c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x36>
 8000564:	20000028 	.word	0x20000028
 8000568:	40010c00 	.word	0x40010c00

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09c      	sub	sp, #112	; 0x70
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000576:	2238      	movs	r2, #56	; 0x38
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f001 ff3c 	bl	80023f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2220      	movs	r2, #32
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 ff2e 	bl	80023f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800059c:	230a      	movs	r3, #10
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005b4:	2300      	movs	r3, #0
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fe6c 	bl	80012a4 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005d2:	f000 f893 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ee:	2101      	movs	r1, #1
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 f96d 	bl	80018d0 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f87e 	bl	80006fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000608:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fb41 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000618:	f000 f870 	bl	80006fc <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <SystemClock_Config+0xc0>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	3770      	adds	r7, #112	; 0x70
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	42420070 	.word	0x42420070

08000630 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_RTC_Init+0x30>)
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <MX_RTC_Init+0x34>)
 8000638:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_RTC_Init+0x30>)
 800063c:	f04f 32ff 	mov.w	r2, #4294967295
 8000640:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_RTC_Init+0x30>)
 8000644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000648:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_RTC_Init+0x30>)
 800064c:	f001 fda6 	bl	800219c <HAL_RTC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000656:	f000 f851 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000068 	.word	0x20000068
 8000664:	40002800 	.word	0x40002800

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_GPIO_Init+0x8c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_GPIO_Init+0x8c>)
 8000682:	f043 0320 	orr.w	r3, r3, #32
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_GPIO_Init+0x8c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0x8c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x8c>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_GPIO_Init+0x8c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x8c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x8c>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_GPIO_Init+0x8c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0x90>)
 80006ca:	f000 fdc7 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	2302      	movs	r3, #2
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0x90>)
 80006e6:	f000 fc35 	bl	8000f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010c00 	.word	0x40010c00

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_MspInit+0x5c>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <HAL_MspInit+0x5c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x5c>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x5c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <HAL_MspInit+0x5c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_MspInit+0x5c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x60>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <HAL_MspInit+0x60>)
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000
 8000768:	40010000 	.word	0x40010000

0800076c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <HAL_RTC_MspInit+0x3c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d110      	bne.n	80007a0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800077e:	f000 fd85 	bl	800128c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_RTC_MspInit+0x40>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <HAL_RTC_MspInit+0x40>)
 8000788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_RTC_MspInit+0x40>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_RTC_MspInit+0x44>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40002800 	.word	0x40002800
 80007ac:	40021000 	.word	0x40021000
 80007b0:	4242043c 	.word	0x4242043c

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f87f 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <CAN1_RX0_IRQHandler+0x10>)
 800080a:	f000 f893 	bl	8000934 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000040 	.word	0x20000040

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff fff8 	bl	8000818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800082a:	490c      	ldr	r1, [pc, #48]	; (800085c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <LoopFillZerobss+0x16>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000840:	4c09      	ldr	r4, [pc, #36]	; (8000868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800084e:	f001 fdaf 	bl	80023b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fe6b 	bl	800052c <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000860:	08002488 	.word	0x08002488
  ldr r2, =_sbss
 8000864:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000868:	20000080 	.word	0x20000080

0800086c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_Init+0x28>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <HAL_Init+0x28>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 fb33 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff ff3c 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40022000 	.word	0x40022000

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 fb3d 	bl	8000f3a <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 fb13 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000008 	.word	0x20000008
 800091c:	2000007c 	.word	0x2000007c

08000920 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	2000007c 	.word	0x2000007c

08000934 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b00      	cmp	r3, #0
 8000978:	d07c      	beq.n	8000a74 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2201      	movs	r2, #1
 800098a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	2b00      	cmp	r3, #0
 8000994:	d003      	beq.n	800099e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f983 	bl	8000ca2 <HAL_CAN_TxMailbox0CompleteCallback>
 800099c:	e016      	b.n	80009cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
 80009b0:	e00c      	b.n	80009cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d004      	beq.n	80009c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
 80009c4:	e002      	b.n	80009cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f986 	bl	8000cd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d024      	beq.n	8000a20 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f962 	bl	8000cb4 <HAL_CAN_TxMailbox1CompleteCallback>
 80009f0:	e016      	b.n	8000a20 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
 8000a04:	e00c      	b.n	8000a20 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
 8000a18:	e002      	b.n	8000a20 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f000 f965 	bl	8000cea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d024      	beq.n	8000a74 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 f941 	bl	8000cc6 <HAL_CAN_TxMailbox2CompleteCallback>
 8000a44:	e016      	b.n	8000a74 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d004      	beq.n	8000a5a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
 8000a58:	e00c      	b.n	8000a74 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d004      	beq.n	8000a6e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6c:	e002      	b.n	8000a74 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f944 	bl	8000cfc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d007      	beq.n	8000a98 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2210      	movs	r2, #16
 8000a96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d00b      	beq.n	8000aba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f933 	bl	8000d20 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f91b 	bl	8000d0e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00c      	beq.n	8000afc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d007      	beq.n	8000afc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2210      	movs	r2, #16
 8000afa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000afc:	6a3b      	ldr	r3, [r7, #32]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00b      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2208      	movs	r2, #8
 8000b16:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f913 	bl	8000d44 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d009      	beq.n	8000b3c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f8fb 	bl	8000d32 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00b      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d006      	beq.n	8000b5e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2210      	movs	r2, #16
 8000b56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f8fc 	bl	8000d56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b5e:	6a3b      	ldr	r3, [r7, #32]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d00b      	beq.n	8000b80 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2208      	movs	r2, #8
 8000b78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f8f4 	bl	8000d68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d07b      	beq.n	8000c82 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d072      	beq.n	8000c7a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d008      	beq.n	8000bb0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d008      	beq.n	8000be8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d043      	beq.n	8000c7a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d03e      	beq.n	8000c7a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000c02:	2b60      	cmp	r3, #96	; 0x60
 8000c04:	d02b      	beq.n	8000c5e <HAL_CAN_IRQHandler+0x32a>
 8000c06:	2b60      	cmp	r3, #96	; 0x60
 8000c08:	d82e      	bhi.n	8000c68 <HAL_CAN_IRQHandler+0x334>
 8000c0a:	2b50      	cmp	r3, #80	; 0x50
 8000c0c:	d022      	beq.n	8000c54 <HAL_CAN_IRQHandler+0x320>
 8000c0e:	2b50      	cmp	r3, #80	; 0x50
 8000c10:	d82a      	bhi.n	8000c68 <HAL_CAN_IRQHandler+0x334>
 8000c12:	2b40      	cmp	r3, #64	; 0x40
 8000c14:	d019      	beq.n	8000c4a <HAL_CAN_IRQHandler+0x316>
 8000c16:	2b40      	cmp	r3, #64	; 0x40
 8000c18:	d826      	bhi.n	8000c68 <HAL_CAN_IRQHandler+0x334>
 8000c1a:	2b30      	cmp	r3, #48	; 0x30
 8000c1c:	d010      	beq.n	8000c40 <HAL_CAN_IRQHandler+0x30c>
 8000c1e:	2b30      	cmp	r3, #48	; 0x30
 8000c20:	d822      	bhi.n	8000c68 <HAL_CAN_IRQHandler+0x334>
 8000c22:	2b10      	cmp	r3, #16
 8000c24:	d002      	beq.n	8000c2c <HAL_CAN_IRQHandler+0x2f8>
 8000c26:	2b20      	cmp	r3, #32
 8000c28:	d005      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000c2a:	e01d      	b.n	8000c68 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c34:	e019      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	f043 0310 	orr.w	r3, r3, #16
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c3e:	e014      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	f043 0320 	orr.w	r3, r3, #32
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c48:	e00f      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c52:	e00a      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c5c:	e005      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c66:	e000      	b.n	8000c6a <HAL_CAN_IRQHandler+0x336>
            break;
 8000c68:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	699a      	ldr	r2, [r3, #24]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c78:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2204      	movs	r2, #4
 8000c80:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d008      	beq.n	8000c9a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f870 	bl	8000d7a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr

08000cea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff90 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff49 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5e 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff90 	bl	8000e44 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5f 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e169      	b.n	800123c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8158 	bne.w	8001236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a9a      	ldr	r2, [pc, #616]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d05e      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f90:	4a98      	ldr	r2, [pc, #608]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d875      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000f96:	4a98      	ldr	r2, [pc, #608]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d058      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f9c:	4a96      	ldr	r2, [pc, #600]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d86f      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a96      	ldr	r2, [pc, #600]	; (80011fc <HAL_GPIO_Init+0x2a8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d052      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fa8:	4a94      	ldr	r2, [pc, #592]	; (80011fc <HAL_GPIO_Init+0x2a8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d869      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fae:	4a94      	ldr	r2, [pc, #592]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d04c      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fb4:	4a92      	ldr	r2, [pc, #584]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d863      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fba:	4a92      	ldr	r2, [pc, #584]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d046      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a90      	ldr	r2, [pc, #576]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d85d      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d82a      	bhi.n	8001020 <HAL_GPIO_Init+0xcc>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d859      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <HAL_GPIO_Init+0x80>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800107d 	.word	0x0800107d
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	08001083 	.word	0x08001083
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	08001083 	.word	0x08001083
 8000ffc:	08001083 	.word	0x08001083
 8001000:	08001083 	.word	0x08001083
 8001004:	08001083 	.word	0x08001083
 8001008:	08001083 	.word	0x08001083
 800100c:	08001083 	.word	0x08001083
 8001010:	08001083 	.word	0x08001083
 8001014:	08001083 	.word	0x08001083
 8001018:	08001031 	.word	0x08001031
 800101c:	08001045 	.word	0x08001045
 8001020:	4a79      	ldr	r2, [pc, #484]	; (8001208 <HAL_GPIO_Init+0x2b4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e029      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e024      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01f      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e01a      	b.n	8001084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e013      	b.n	8001084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
          break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          break;
 800107a:	e003      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x130>
          break;
 8001082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d801      	bhi.n	800108e <HAL_GPIO_Init+0x13a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_Init+0x13e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d802      	bhi.n	80010a0 <HAL_GPIO_Init+0x14c>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x152>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3b08      	subs	r3, #8
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80b1 	beq.w	8001236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b4d      	ldr	r3, [pc, #308]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ec:	4a48      	ldr	r2, [pc, #288]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a40      	ldr	r2, [pc, #256]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3f      	ldr	r2, [pc, #252]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1e8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3e      	ldr	r2, [pc, #248]	; (800121c <HAL_GPIO_Init+0x2c8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1e4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1e0>
 8001130:	2303      	movs	r3, #3
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001134:	2304      	movs	r3, #4
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001140:	2300      	movs	r3, #0
 8001142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001152:	492f      	ldr	r1, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	492c      	ldr	r1, [pc, #176]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4928      	ldr	r1, [pc, #160]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	4922      	ldr	r1, [pc, #136]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	491e      	ldr	r1, [pc, #120]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4918      	ldr	r1, [pc, #96]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4914      	ldr	r1, [pc, #80]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d021      	beq.n	8001228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e021      	b.n	8001236 <HAL_GPIO_Init+0x2e2>
 80011f2:	bf00      	nop
 80011f4:	10320000 	.word	0x10320000
 80011f8:	10310000 	.word	0x10310000
 80011fc:	10220000 	.word	0x10220000
 8001200:	10210000 	.word	0x10210000
 8001204:	10120000 	.word	0x10120000
 8001208:	10110000 	.word	0x10110000
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011000 	.word	0x40011000
 8001220:	40011400 	.word	0x40011400
 8001224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_GPIO_Init+0x304>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4909      	ldr	r1, [pc, #36]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001232:	4013      	ands	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	3301      	adds	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae8e 	bne.w	8000f68 <HAL_GPIO_Init+0x14>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	372c      	adds	r7, #44	; 0x2c
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	611a      	str	r2, [r3, #16]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	420e0020 	.word	0x420e0020

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e304      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8087 	beq.w	80013d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c4:	4b92      	ldr	r3, [pc, #584]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 030c 	and.w	r3, r3, #12
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d00c      	beq.n	80012ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d0:	4b8f      	ldr	r3, [pc, #572]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b08      	cmp	r3, #8
 80012da:	d112      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
 80012dc:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e8:	d10b      	bne.n	8001302 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d06c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x12c>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d168      	bne.n	80013d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e2de      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x76>
 800130c:	4b80      	ldr	r3, [pc, #512]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a7f      	ldr	r2, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	e02e      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b78      	ldr	r3, [pc, #480]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a77      	ldr	r2, [pc, #476]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001334:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e01d      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0xbc>
 8001346:	4b72      	ldr	r3, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a71      	ldr	r2, [pc, #452]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0xd4>
 8001360:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6a      	ldr	r2, [pc, #424]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a67      	ldr	r2, [pc, #412]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d013      	beq.n	80013a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff face 	bl	8000920 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff faca 	bl	8000920 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e292      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0xe4>
 80013a6:	e014      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff faba 	bl	8000920 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fab6 	bl	8000920 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e27e      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x10c>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d063      	beq.n	80014a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d11c      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d116      	bne.n	8001430 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d005      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e252      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4939      	ldr	r1, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800142a:	4313      	orrs	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	e03a      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d020      	beq.n	800147a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001438:	4b36      	ldr	r3, [pc, #216]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fa6f 	bl	8000920 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fa6b 	bl	8000920 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e233      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 8001474:	4313      	orrs	r3, r2
 8001476:	600b      	str	r3, [r1, #0]
 8001478:	e015      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001480:	f7ff fa4e 	bl	8000920 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fa4a 	bl	8000920 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e212      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f0      	bne.n	8001488 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03a      	beq.n	8001528 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d019      	beq.n	80014ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_RCC_OscConfig+0x274>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c0:	f7ff fa2e 	bl	8000920 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c8:	f7ff fa2a 	bl	8000920 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1f2      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e6:	2001      	movs	r0, #1
 80014e8:	f000 fbb6 	bl	8001c58 <RCC_Delay>
 80014ec:	e01c      	b.n	8001528 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_RCC_OscConfig+0x274>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa14 	bl	8000920 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fa:	e00f      	b.n	800151c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa10 	bl	8000920 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d908      	bls.n	800151c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1d8      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	42420000 	.word	0x42420000
 8001518:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b9b      	ldr	r3, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1e9      	bne.n	80014fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 80a6 	beq.w	8001682 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b94      	ldr	r3, [pc, #592]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b91      	ldr	r3, [pc, #580]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a90      	ldr	r2, [pc, #576]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b8e      	ldr	r3, [pc, #568]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b8b      	ldr	r3, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a87      	ldr	r2, [pc, #540]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff f9d1 	bl	8000920 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff f9cd 	bl	8000920 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e195      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b7e      	ldr	r3, [pc, #504]	; (8001790 <HAL_RCC_OscConfig+0x4ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x312>
 80015a8:	4b78      	ldr	r3, [pc, #480]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a77      	ldr	r2, [pc, #476]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e02d      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x334>
 80015be:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a6f      	ldr	r2, [pc, #444]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x356>
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4a69      	ldr	r2, [pc, #420]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6213      	str	r3, [r2, #32]
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4a66      	ldr	r2, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6213      	str	r3, [r2, #32]
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x36e>
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a63      	ldr	r2, [pc, #396]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a60      	ldr	r2, [pc, #384]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff f981 	bl	8000920 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff f97d 	bl	8000920 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e143      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b54      	ldr	r3, [pc, #336]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x37e>
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff f96b 	bl	8000920 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff f967 	bl	8000920 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e12d      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 808c 	beq.w	80017a4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e103      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d14e      	bne.n	800175e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0ef      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_RCC_OscConfig+0x4f0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f91b 	bl	8000920 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80016ee:	f7ff f917 	bl	8000920 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e0df      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f0      	bne.n	80016ee <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	491c      	ldr	r1, [pc, #112]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800171a:	4313      	orrs	r3, r2
 800171c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4918      	ldr	r1, [pc, #96]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <HAL_RCC_OscConfig+0x4f0>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff f8f3 	bl	8000920 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800173e:	f7ff f8ef 	bl	8000920 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0b7      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x49a>
 800175c:	e022      	b.n	80017a4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x4e8>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_RCC_OscConfig+0x4f0>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff f8d6 	bl	8000920 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001778:	f7ff f8d2 	bl	8000920 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d908      	bls.n	8001798 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e09a      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1e9      	bne.n	8001778 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 8088 	beq.w	80018be <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d068      	beq.n	800188c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d14d      	bne.n	800185e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HAL_RCC_OscConfig+0x628>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f8aa 	bl	8000920 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f8a6 	bl	8000920 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e06e      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d10f      	bne.n	8001818 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80017f8:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 80017fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4931      	ldr	r1, [pc, #196]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 8001802:	4313      	orrs	r3, r2
 8001804:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f023 020f 	bic.w	r2, r3, #15
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	492d      	ldr	r1, [pc, #180]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 8001814:	4313      	orrs	r3, r2
 8001816:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	430b      	orrs	r3, r1
 800182a:	4927      	ldr	r1, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_RCC_OscConfig+0x628>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff f873 	bl	8000920 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff f86f 	bl	8000920 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e037      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x59a>
 800185c:	e02f      	b.n	80018be <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x628>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff f85c 	bl	8000920 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f858 	bl	8000920 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e020      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x5c8>
 800188a:	e018      	b.n	80018be <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e013      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x624>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	42420060 	.word	0x42420060

080018d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0d0      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d910      	bls.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4965      	ldr	r1, [pc, #404]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b8      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	494d      	ldr	r1, [pc, #308]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d040      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e073      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06b      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4936      	ldr	r1, [pc, #216]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7fe ffae 	bl	8000920 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7fe ffaa 	bl	8000920 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e053      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d210      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4922      	ldr	r1, [pc, #136]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e032      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5e:	f000 f821 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1cc>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe ff0c 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	08002420 	.word	0x08002420
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa8:	b08e      	sub	sp, #56	; 0x38
 8001aaa:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac8:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d002      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x3a>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d003      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8001adc:	e089      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae2:	e089      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	0c9b      	lsrs	r3, r3, #18
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x168>)
 8001aee:	5c9b      	ldrb	r3, [r3, r2]
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d072      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001b06:	5c9b      	ldrb	r3, [r3, r2]
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d053      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	3301      	adds	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001b24:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3302      	adds	r3, #2
 8001b30:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	2200      	movs	r2, #0
 8001b36:	469a      	mov	sl, r3
 8001b38:	4693      	mov	fp, r2
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	617a      	str	r2, [r7, #20]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	fb03 f20b 	mul.w	r2, r3, fp
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	fb0a f303 	mul.w	r3, sl, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	fbaa 0102 	umull	r0, r1, sl, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b5c:	fb03 f201 	mul.w	r2, r3, r1
 8001b60:	2300      	movs	r3, #0
 8001b62:	fb00 f303 	mul.w	r3, r0, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	4a27      	ldr	r2, [pc, #156]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b6a:	fba0 4502 	umull	r4, r5, r0, r2
 8001b6e:	442b      	add	r3, r5
 8001b70:	461d      	mov	r5, r3
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	60fa      	str	r2, [r7, #12]
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	fb02 f203 	mul.w	r2, r2, r3
 8001b92:	465b      	mov	r3, fp
 8001b94:	4684      	mov	ip, r0
 8001b96:	fb0c f303 	mul.w	r3, ip, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	fba2 8901 	umull	r8, r9, r2, r1
 8001ba4:	444b      	add	r3, r9
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb38 	bl	8000224 <__aeabi_uldivmod>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
 8001bbc:	e007      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001bc2:	fb03 f202 	mul.w	r2, r3, r2
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x168>)
 8001bd0:	7b5b      	ldrb	r3, [r3, #13]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	e004      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x170>)
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8001bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x174>)
 8001bf4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3738      	adds	r7, #56	; 0x38
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	017d7840 	.word	0x017d7840
 8001c0c:	08002438 	.word	0x08002438
 8001c10:	08002448 	.word	0x08002448
 8001c14:	003d0900 	.word	0x003d0900
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b02      	ldr	r3, [pc, #8]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff fff2 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4903      	ldr	r1, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	08002430 	.word	0x08002430

08001c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <RCC_Delay+0x34>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <RCC_Delay+0x38>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0a5b      	lsrs	r3, r3, #9
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c74:	bf00      	nop
  }
  while (Delay --);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f9      	bne.n	8001c74 <RCC_Delay+0x1c>
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	10624dd3 	.word	0x10624dd3

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d07d      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb8:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4a87      	ldr	r2, [pc, #540]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	61d3      	str	r3, [r2, #28]
 8001cd0:	4b85      	ldr	r3, [pc, #532]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b82      	ldr	r3, [pc, #520]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cec:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fe12 	bl	8000920 <HAL_GetTick>
 8001cfc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7fe fe0e 	bl	8000920 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0e5      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d02e      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d027      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d46:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d52:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fddd 	bl	8000920 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fdd9 	bl	8000920 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0ae      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ee      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4953      	ldr	r1, [pc, #332]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9e:	7efb      	ldrb	r3, [r7, #27]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a4f      	ldr	r2, [pc, #316]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4947      	ldr	r1, [pc, #284]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001dda:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4940      	ldr	r1, [pc, #256]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	4938      	ldr	r1, [pc, #224]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8001e0a:	4b37      	ldr	r3, [pc, #220]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d148      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d138      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001e38:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e042      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8001e58:	4b23      	ldr	r3, [pc, #140]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4920      	ldr	r1, [pc, #128]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	491c      	ldr	r1, [pc, #112]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7fe fd4d 	bl	8000920 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e8a:	f7fe fd49 	bl	8000920 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e020      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001ea8:	e009      	b.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4904      	ldr	r1, [pc, #16]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	42420440 	.word	0x42420440
 8001ef4:	42420070 	.word	0x42420070

08001ef8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	f200 811d 	bhi.w	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8001f2a:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8001f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f30:	080020e5 	.word	0x080020e5
 8001f34:	08002149 	.word	0x08002149
 8001f38:	08002165 	.word	0x08002165
 8001f3c:	08002043 	.word	0x08002043
 8001f40:	08002165 	.word	0x08002165
 8001f44:	08002165 	.word	0x08002165
 8001f48:	08002165 	.word	0x08002165
 8001f4c:	08002095 	.word	0x08002095
 8001f50:	08002165 	.word	0x08002165
 8001f54:	08002165 	.word	0x08002165
 8001f58:	08002165 	.word	0x08002165
 8001f5c:	08002165 	.word	0x08002165
 8001f60:	08002165 	.word	0x08002165
 8001f64:	08002165 	.word	0x08002165
 8001f68:	08002165 	.word	0x08002165
 8001f6c:	08001f71 	.word	0x08001f71
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8001f70:	4b83      	ldr	r3, [pc, #524]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80f2 	beq.w	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	4a7d      	ldr	r2, [pc, #500]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d03b      	beq.n	8002014 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	4a78      	ldr	r2, [pc, #480]	; (8002188 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001faa:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001fc4:	4b6e      	ldr	r3, [pc, #440]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3302      	adds	r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8001fd2:	4a6e      	ldr	r2, [pc, #440]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	fb03 f202 	mul.w	r2, r3, r2
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e007      	b.n	8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ff0:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002000:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8002002:	7b5b      	ldrb	r3, [r3, #13]
 8002004:	461a      	mov	r2, r3
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4293      	cmp	r3, r2
 800200a:	d108      	bne.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e004      	b.n	800201e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	4a5e      	ldr	r2, [pc, #376]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800202a:	d102      	bne.n	8002032 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002030:	e09a      	b.n	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	623b      	str	r3, [r7, #32]
      break;
 8002040:	e092      	b.n	8002168 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8002042:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 800204e:	f7ff fd29 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8002052:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002054:	e08a      	b.n	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 8002056:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8084 	beq.w	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002064:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8002072:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002076:	0b1b      	lsrs	r3, r3, #12
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	3302      	adds	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8002080:	4a42      	ldr	r2, [pc, #264]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	623b      	str	r3, [r7, #32]
      break;
 8002092:	e06b      	b.n	800216c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80020a0:	f7ff fd00 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 80020a4:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80020a6:	e063      	b.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d05d      	beq.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	0b1b      	lsrs	r3, r3, #12
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	3302      	adds	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80020d0:	4a2e      	ldr	r2, [pc, #184]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	623b      	str	r3, [r7, #32]
      break;
 80020e2:	e045      	b.n	8002170 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80020e4:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f4:	d108      	bne.n	8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8002100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002104:	623b      	str	r3, [r7, #32]
 8002106:	e01e      	b.n	8002146 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002112:	d109      	bne.n	8002128 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8002120:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e00e      	b.n	8002146 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002132:	d11f      	bne.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d019      	beq.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002142:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002144:	e016      	b.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8002146:	e015      	b.n	8002174 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002148:	f7ff fd72 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 800214c:	4602      	mov	r2, r0
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	0b9b      	lsrs	r3, r3, #14
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	3301      	adds	r3, #1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	623b      	str	r3, [r7, #32]
      break;
 8002162:	e008      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 8002164:	bf00      	nop
 8002166:	e006      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 8002174:	bf00      	nop
    }
  }
  return (frequency);
 8002176:	6a3b      	ldr	r3, [r7, #32]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	08002458 	.word	0x08002458
 8002188:	08002468 	.word	0x08002468
 800218c:	017d7840 	.word	0x017d7840
 8002190:	003d0900 	.word	0x003d0900
 8002194:	aaaaaaab 	.word	0xaaaaaaab
 8002198:	0002faf0 	.word	0x0002faf0

0800219c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07a      	b.n	80022a8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7c5b      	ldrb	r3, [r3, #17]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fad2 	bl	800076c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f870 	bl	80022b4 <HAL_RTC_WaitForSynchro>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2204      	movs	r2, #4
 80021de:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e061      	b.n	80022a8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f892 	bl	800230e <RTC_EnterInitMode>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2204      	movs	r2, #4
 80021f4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e056      	b.n	80022a8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0207 	bic.w	r2, r2, #7
 8002208:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_RTC_Init+0x114>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_RTC_Init+0x114>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RTC_Init+0x114>)
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4921      	ldr	r1, [pc, #132]	; (80022b0 <HAL_RTC_Init+0x114>)
 800222c:	4313      	orrs	r3, r2
 800222e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d003      	beq.n	8002242 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e00e      	b.n	8002260 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff fe58 	bl	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002248:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d104      	bne.n	800225a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2204      	movs	r2, #4
 8002254:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e026      	b.n	80022a8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	0c1a      	lsrs	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f002 020f 	and.w	r2, r2, #15
 800226c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	b292      	uxth	r2, r2
 8002276:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f870 	bl	800235e <RTC_ExitInitMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00c      	b.n	80022a8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40006c00 	.word	0x40006c00

080022b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e01d      	b.n	8002306 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80022da:	f7fe fb21 	bl	8000920 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80022e0:	e009      	b.n	80022f6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80022e2:	f7fe fb1d 	bl	8000920 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d901      	bls.n	80022f6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e007      	b.n	8002306 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800231a:	f7fe fb01 	bl	8000920 <HAL_GetTick>
 800231e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002320:	e009      	b.n	8002336 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002322:	f7fe fafd 	bl	8000920 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002330:	d901      	bls.n	8002336 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e00f      	b.n	8002356 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0ee      	beq.n	8002322 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0210 	orr.w	r2, r2, #16
 8002352:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0210 	bic.w	r2, r2, #16
 8002378:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800237a:	f7fe fad1 	bl	8000920 <HAL_GetTick>
 800237e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002380:	e009      	b.n	8002396 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002382:	f7fe facd 	bl	8000920 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002390:	d901      	bls.n	8002396 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e007      	b.n	80023a6 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ee      	beq.n	8002382 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <__libc_init_array>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	2600      	movs	r6, #0
 80023b4:	4d0c      	ldr	r5, [pc, #48]	; (80023e8 <__libc_init_array+0x38>)
 80023b6:	4c0d      	ldr	r4, [pc, #52]	; (80023ec <__libc_init_array+0x3c>)
 80023b8:	1b64      	subs	r4, r4, r5
 80023ba:	10a4      	asrs	r4, r4, #2
 80023bc:	42a6      	cmp	r6, r4
 80023be:	d109      	bne.n	80023d4 <__libc_init_array+0x24>
 80023c0:	f000 f822 	bl	8002408 <_init>
 80023c4:	2600      	movs	r6, #0
 80023c6:	4d0a      	ldr	r5, [pc, #40]	; (80023f0 <__libc_init_array+0x40>)
 80023c8:	4c0a      	ldr	r4, [pc, #40]	; (80023f4 <__libc_init_array+0x44>)
 80023ca:	1b64      	subs	r4, r4, r5
 80023cc:	10a4      	asrs	r4, r4, #2
 80023ce:	42a6      	cmp	r6, r4
 80023d0:	d105      	bne.n	80023de <__libc_init_array+0x2e>
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d8:	4798      	blx	r3
 80023da:	3601      	adds	r6, #1
 80023dc:	e7ee      	b.n	80023bc <__libc_init_array+0xc>
 80023de:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e2:	4798      	blx	r3
 80023e4:	3601      	adds	r6, #1
 80023e6:	e7f2      	b.n	80023ce <__libc_init_array+0x1e>
 80023e8:	08002480 	.word	0x08002480
 80023ec:	08002480 	.word	0x08002480
 80023f0:	08002480 	.word	0x08002480
 80023f4:	08002484 	.word	0x08002484

080023f8 <memset>:
 80023f8:	4603      	mov	r3, r0
 80023fa:	4402      	add	r2, r0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d100      	bne.n	8002402 <memset+0xa>
 8002400:	4770      	bx	lr
 8002402:	f803 1b01 	strb.w	r1, [r3], #1
 8002406:	e7f9      	b.n	80023fc <memset+0x4>

08002408 <_init>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr

08002414 <_fini>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	bf00      	nop
 8002418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241a:	bc08      	pop	{r3}
 800241c:	469e      	mov	lr, r3
 800241e:	4770      	bx	lr
