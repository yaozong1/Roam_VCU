
Roam_VCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c48  08004c48  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004c48  08004c48  00014c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c50  08004c50  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000014  08004c6c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  08004c6c  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001260f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c0  00000000  00000000  0003264c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00034d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00035f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb8c  00000000  00000000  00037050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001312c  00000000  00000000  00056bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba41c  00000000  00000000  00069d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cf4  00000000  00000000  00124174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	08004b34 	.word	0x08004b34

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	08004b34 	.word	0x08004b34

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b976 	b.w	8000528 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14d      	bne.n	8000300 <__udivmoddi4+0xac>
 8000264:	428a      	cmp	r2, r1
 8000266:	4694      	mov	ip, r2
 8000268:	d968      	bls.n	800033c <__udivmoddi4+0xe8>
 800026a:	fab2 f282 	clz	r2, r2
 800026e:	b152      	cbz	r2, 8000286 <__udivmoddi4+0x32>
 8000270:	fa01 f302 	lsl.w	r3, r1, r2
 8000274:	f1c2 0120 	rsb	r1, r2, #32
 8000278:	fa20 f101 	lsr.w	r1, r0, r1
 800027c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000280:	ea41 0803 	orr.w	r8, r1, r3
 8000284:	4094      	lsls	r4, r2
 8000286:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800028a:	fbb8 f7f1 	udiv	r7, r8, r1
 800028e:	fa1f fe8c 	uxth.w	lr, ip
 8000292:	fb01 8817 	mls	r8, r1, r7, r8
 8000296:	fb07 f00e 	mul.w	r0, r7, lr
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a0:	4298      	cmp	r0, r3
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	eb1c 0303 	adds.w	r3, ip, r3
 80002a8:	f107 35ff 	add.w	r5, r7, #4294967295
 80002ac:	f080 811e 	bcs.w	80004ec <__udivmoddi4+0x298>
 80002b0:	4298      	cmp	r0, r3
 80002b2:	f240 811b 	bls.w	80004ec <__udivmoddi4+0x298>
 80002b6:	3f02      	subs	r7, #2
 80002b8:	4463      	add	r3, ip
 80002ba:	1a1b      	subs	r3, r3, r0
 80002bc:	fbb3 f0f1 	udiv	r0, r3, r1
 80002c0:	fb01 3310 	mls	r3, r1, r0, r3
 80002c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ce:	45a6      	cmp	lr, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 8109 	bcs.w	80004f0 <__udivmoddi4+0x29c>
 80002de:	45a6      	cmp	lr, r4
 80002e0:	f240 8106 	bls.w	80004f0 <__udivmoddi4+0x29c>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	b11e      	cbz	r6, 80002fc <__udivmoddi4+0xa8>
 80002f4:	2300      	movs	r3, #0
 80002f6:	40d4      	lsrs	r4, r2
 80002f8:	e9c6 4300 	strd	r4, r3, [r6]
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	428b      	cmp	r3, r1
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0xc2>
 8000304:	2e00      	cmp	r6, #0
 8000306:	f000 80ee 	beq.w	80004e6 <__udivmoddi4+0x292>
 800030a:	2100      	movs	r1, #0
 800030c:	e9c6 0500 	strd	r0, r5, [r6]
 8000310:	4608      	mov	r0, r1
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d14a      	bne.n	80003b4 <__udivmoddi4+0x160>
 800031e:	42ab      	cmp	r3, r5
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xd4>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 80fc 	bhi.w	8000520 <__udivmoddi4+0x2cc>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb65 0303 	sbc.w	r3, r5, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4698      	mov	r8, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d0e2      	beq.n	80002fc <__udivmoddi4+0xa8>
 8000336:	e9c6 4800 	strd	r4, r8, [r6]
 800033a:	e7df      	b.n	80002fc <__udivmoddi4+0xa8>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xec>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	2a00      	cmp	r2, #0
 8000346:	f040 8091 	bne.w	800046c <__udivmoddi4+0x218>
 800034a:	eba1 000c 	sub.w	r0, r1, ip
 800034e:	2101      	movs	r1, #1
 8000350:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000354:	fa1f fe8c 	uxth.w	lr, ip
 8000358:	fbb0 f3f7 	udiv	r3, r0, r7
 800035c:	fb07 0013 	mls	r0, r7, r3, r0
 8000360:	0c25      	lsrs	r5, r4, #16
 8000362:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000366:	fb0e f003 	mul.w	r0, lr, r3
 800036a:	42a8      	cmp	r0, r5
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x12c>
 800036e:	eb1c 0505 	adds.w	r5, ip, r5
 8000372:	f103 38ff 	add.w	r8, r3, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x12a>
 8000378:	42a8      	cmp	r0, r5
 800037a:	f200 80ce 	bhi.w	800051a <__udivmoddi4+0x2c6>
 800037e:	4643      	mov	r3, r8
 8000380:	1a2d      	subs	r5, r5, r0
 8000382:	fbb5 f0f7 	udiv	r0, r5, r7
 8000386:	fb07 5510 	mls	r5, r7, r0, r5
 800038a:	fb0e fe00 	mul.w	lr, lr, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x156>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 35ff 	add.w	r5, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x154>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80b6 	bhi.w	8000514 <__udivmoddi4+0x2c0>
 80003a8:	4628      	mov	r0, r5
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003b2:	e79e      	b.n	80002f2 <__udivmoddi4+0x9e>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa25 fa07 	lsr.w	sl, r5, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbba f8f9 	udiv	r8, sl, r9
 80003ce:	fa20 f307 	lsr.w	r3, r0, r7
 80003d2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003d6:	408d      	lsls	r5, r1
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	431d      	orrs	r5, r3
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fb08 f00e 	mul.w	r0, r8, lr
 80003e6:	0c2c      	lsrs	r4, r5, #16
 80003e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b8>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2bc>
 8000400:	42a0      	cmp	r0, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2bc>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1a24      	subs	r4, r4, r0
 800040e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000412:	fb09 4410 	mls	r4, r9, r0, r4
 8000416:	fb00 fe0e 	mul.w	lr, r0, lr
 800041a:	b2ad      	uxth	r5, r5
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1e2>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 35ff 	add.w	r5, r0, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2b4>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2b4>
 8000432:	3802      	subs	r0, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800043a:	fba0 9502 	umull	r9, r5, r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x2a4>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x2a0>
 800044c:	2e00      	cmp	r6, #0
 800044e:	d069      	beq.n	8000524 <__udivmoddi4+0x2d0>
 8000450:	ebb3 0208 	subs.w	r2, r3, r8
 8000454:	eb64 040e 	sbc.w	r4, r4, lr
 8000458:	fa22 f301 	lsr.w	r3, r2, r1
 800045c:	fa04 f707 	lsl.w	r7, r4, r7
 8000460:	431f      	orrs	r7, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	2100      	movs	r1, #0
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0xa8>
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	f1c2 0120 	rsb	r1, r2, #32
 8000474:	fa25 f301 	lsr.w	r3, r5, r1
 8000478:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047c:	fa20 f101 	lsr.w	r1, r0, r1
 8000480:	4095      	lsls	r5, r2
 8000482:	430d      	orrs	r5, r1
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3311 	mls	r3, r7, r1, r3
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	0c28      	lsrs	r0, r5, #16
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	fb01 f30e 	mul.w	r3, r1, lr
 800049a:	4283      	cmp	r3, r0
 800049c:	fa04 f402 	lsl.w	r4, r4, r2
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x260>
 80004a2:	eb1c 0000 	adds.w	r0, ip, r0
 80004a6:	f101 38ff 	add.w	r8, r1, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b8>
 80004ac:	4283      	cmp	r3, r0
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b8>
 80004b0:	3902      	subs	r1, #2
 80004b2:	4460      	add	r0, ip
 80004b4:	1ac0      	subs	r0, r0, r3
 80004b6:	fbb0 f3f7 	udiv	r3, r0, r7
 80004ba:	fb07 0013 	mls	r0, r7, r3, r0
 80004be:	b2ad      	uxth	r5, r5
 80004c0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004c4:	fb03 f00e 	mul.w	r0, r3, lr
 80004c8:	42a8      	cmp	r0, r5
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x28a>
 80004cc:	eb1c 0505 	adds.w	r5, ip, r5
 80004d0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004d6:	42a8      	cmp	r0, r5
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	1a28      	subs	r0, r5, r0
 80004e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0x104>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e707      	b.n	80002fc <__udivmoddi4+0xa8>
 80004ec:	462f      	mov	r7, r5
 80004ee:	e6e4      	b.n	80002ba <__udivmoddi4+0x66>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6f9      	b.n	80002e8 <__udivmoddi4+0x94>
 80004f4:	454b      	cmp	r3, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f8>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3801      	subs	r0, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f8>
 8000504:	4643      	mov	r3, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x28a>
 8000508:	4628      	mov	r0, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1e2>
 800050c:	4641      	mov	r1, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x260>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b8>
 8000514:	4464      	add	r4, ip
 8000516:	3802      	subs	r0, #2
 8000518:	e747      	b.n	80003aa <__udivmoddi4+0x156>
 800051a:	3b02      	subs	r3, #2
 800051c:	4465      	add	r5, ip
 800051e:	e72f      	b.n	8000380 <__udivmoddi4+0x12c>
 8000520:	4608      	mov	r0, r1
 8000522:	e706      	b.n	8000332 <__udivmoddi4+0xde>
 8000524:	4631      	mov	r1, r6
 8000526:	e6e9      	b.n	80002fc <__udivmoddi4+0xa8>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	TxHeader.StdId = 0x01;
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <main+0x110>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;                 // 数据长度�??????????????? 8 字节
 8000538:	4b40      	ldr	r3, [pc, #256]	; (800063c <main+0x110>)
 800053a:	2208      	movs	r2, #8
 800053c:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;        // 使用标准标识�???????????????
 800053e:	4b3f      	ldr	r3, [pc, #252]	; (800063c <main+0x110>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;      // 数据�???????????????
 8000544:	4b3d      	ldr	r3, [pc, #244]	; (800063c <main+0x110>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fd6f 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f88f 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 fa6d 	bl	8000a30 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000556:	f000 f8ed 	bl	8000734 <MX_CAN1_Init>
  MX_TIM1_Init();
 800055a:	f000 f99b 	bl	8000894 <MX_TIM1_Init>
  MX_RTC_Init();
 800055e:	f000 f947 	bl	80007f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000562:	f000 f9e7 	bl	8000934 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000566:	f000 f95f 	bl	8000828 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800056a:	f000 fa37 	bl	80009dc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800056e:	f000 fa0b 	bl	8000988 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4832      	ldr	r0, [pc, #200]	; (8000640 <main+0x114>)
 8000578:	f001 fa7d 	bl	8001a76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET); //IMOUT 关闭
 800057c:	2201      	movs	r2, #1
 800057e:	2102      	movs	r1, #2
 8000580:	4830      	ldr	r0, [pc, #192]	; (8000644 <main+0x118>)
 8000582:	f001 fa78 	bl	8001a76 <HAL_GPIO_WritePin>
  SEGGER_RTT_printf(0, "IMOUT CLOSED ...\r\n");
 8000586:	4930      	ldr	r1, [pc, #192]	; (8000648 <main+0x11c>)
 8000588:	2000      	movs	r0, #0
 800058a:	f004 fa81 	bl	8004a90 <SEGGER_RTT_printf>

  uint8_t deviceID = W25N512GVEIG_ReadDeviceID();
 800058e:	f000 fad9 	bl	8000b44 <W25N512GVEIG_ReadDeviceID>
 8000592:	4603      	mov	r3, r0
 8000594:	75fb      	strb	r3, [r7, #23]

  bool IGN_PA0_O_first = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	73fb      	strb	r3, [r7, #15]
  bool IGN_PA0_O_second = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	73bb      	strb	r3, [r7, #14]
  IGN_PA0_O_first = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800059e:	2101      	movs	r1, #1
 80005a0:	482a      	ldr	r0, [pc, #168]	; (800064c <main+0x120>)
 80005a2:	f001 fa51 	bl	8001a48 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	bf14      	ite	ne
 80005ac:	2301      	movne	r3, #1
 80005ae:	2300      	moveq	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]

  HAL_Delay(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fd9c 	bl	80010f0 <HAL_Delay>
  SEGGER_RTT_printf(0, "IGN_PA0_O_first Voltage: %d\r\n", (int)IGN_PA0_O_first);
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	461a      	mov	r2, r3
 80005bc:	4924      	ldr	r1, [pc, #144]	; (8000650 <main+0x124>)
 80005be:	2000      	movs	r0, #0
 80005c0:	f004 fa66 	bl	8004a90 <SEGGER_RTT_printf>

// The first do while is for testing the RS485
      do{
    	 // SEGGER_RTT_printf(0, "sending stuff to rs485 \r\n");

    	  if (HAL_UART_Transmit(&huart2, rsFEF, sizeof(rsFEF), 2000) == HAL_OK) {
 80005c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005c8:	2208      	movs	r2, #8
 80005ca:	4922      	ldr	r1, [pc, #136]	; (8000654 <main+0x128>)
 80005cc:	4822      	ldr	r0, [pc, #136]	; (8000658 <main+0x12c>)
 80005ce:	f003 fb65 	bl	8003c9c <HAL_UART_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d103      	bne.n	80005e0 <main+0xb4>
    		  SEGGER_RTT_printf(0, "Successfully sent to RS485 \r\n");
 80005d8:	4920      	ldr	r1, [pc, #128]	; (800065c <main+0x130>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f004 fa58 	bl	8004a90 <SEGGER_RTT_printf>
    	                                                             }

    	  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	f000 fd84 	bl	80010f0 <HAL_Delay>



    	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, rsFEF_RX, BufferSize_rsFEF, 3000);
 80005e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005ec:	2208      	movs	r2, #8
 80005ee:	491c      	ldr	r1, [pc, #112]	; (8000660 <main+0x134>)
 80005f0:	4819      	ldr	r0, [pc, #100]	; (8000658 <main+0x12c>)
 80005f2:	f003 fbd6 	bl	8003da2 <HAL_UART_Receive>
 80005f6:	4603      	mov	r3, r0
 80005f8:	737b      	strb	r3, [r7, #13]
    	        //rxData[BufferSize - 1] = '\0'; // 添加字符串终止符
    	        // �????????查接收状�????????
    	        if (status == HAL_OK) {
 80005fa:	7b7b      	ldrb	r3, [r7, #13]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1e1      	bne.n	80005c4 <main+0x98>
    	            // 成功接收到数�????????
    	            // 在这里添加代码来处理接收到的数据
    	            // 你可以使�???????? printf 或其他方式将接收到的数据显示出来

    	      	  int dataSize = sizeof(rsFEF_RX);
 8000600:	2308      	movs	r3, #8
 8000602:	60bb      	str	r3, [r7, #8]

    	      	  SEGGER_RTT_printf(0, "Received RS485 DATA IS: ");
 8000604:	4917      	ldr	r1, [pc, #92]	; (8000664 <main+0x138>)
 8000606:	2000      	movs	r0, #0
 8000608:	f004 fa42 	bl	8004a90 <SEGGER_RTT_printf>
    	      	  for (int i = 0; i < dataSize; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	e00b      	b.n	800062a <main+0xfe>
    	      	      SEGGER_RTT_printf(0, "%02X ", rsFEF_RX[i]);
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <main+0x134>)
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	4912      	ldr	r1, [pc, #72]	; (8000668 <main+0x13c>)
 800061e:	2000      	movs	r0, #0
 8000620:	f004 fa36 	bl	8004a90 <SEGGER_RTT_printf>
    	      	  for (int i = 0; i < dataSize; i++) {
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	3301      	adds	r3, #1
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	429a      	cmp	r2, r3
 8000630:	dbef      	blt.n	8000612 <main+0xe6>
    	      	  }
    	      	    SEGGER_RTT_printf(0, "\r\n");
 8000632:	490e      	ldr	r1, [pc, #56]	; (800066c <main+0x140>)
 8000634:	2000      	movs	r0, #0
 8000636:	f004 fa2b 	bl	8004a90 <SEGGER_RTT_printf>
      do{
 800063a:	e7c3      	b.n	80005c4 <main+0x98>
 800063c:	20000030 	.word	0x20000030
 8000640:	40010c00 	.word	0x40010c00
 8000644:	40011000 	.word	0x40011000
 8000648:	08004b4c 	.word	0x08004b4c
 800064c:	40010800 	.word	0x40010800
 8000650:	08004b60 	.word	0x08004b60
 8000654:	20000000 	.word	0x20000000
 8000658:	20000174 	.word	0x20000174
 800065c:	08004b80 	.word	0x08004b80
 8000660:	20000048 	.word	0x20000048
 8000664:	08004ba0 	.word	0x08004ba0
 8000668:	08004bbc 	.word	0x08004bbc
 800066c:	08004bc4 	.word	0x08004bc4

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067a:	2238      	movs	r2, #56	; 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fa50 	bl	8004b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fa42 	bl	8004b24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006a0:	230a      	movs	r3, #10
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006ba:	2300      	movs	r3, #0
 80006bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f9f7 	bl	8001ac0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006d8:	f000 fa5c 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fcf8 	bl	80020ec <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000702:	f000 fa47 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000706:	2301      	movs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800070a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fee0 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800071e:	f000 fa39 	bl	8000b94 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000722:	4b03      	ldr	r3, [pc, #12]	; (8000730 <SystemClock_Config+0xc0>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
}
 8000728:	bf00      	nop
 800072a:	3770      	adds	r7, #112	; 0x70
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	42420070 	.word	0x42420070

08000734 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800073a:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_CAN1_Init+0xb4>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <MX_CAN1_Init+0xb8>)
 800073e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000740:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000742:	2210      	movs	r2, #16
 8000744:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000746:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_CAN1_Init+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000752:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000758:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_CAN1_Init+0xb4>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000760:	2200      	movs	r2, #0
 8000762:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000764:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000766:	2200      	movs	r2, #0
 8000768:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_CAN1_Init+0xb4>)
 800076c:	2200      	movs	r2, #0
 800076e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000772:	2200      	movs	r2, #0
 8000774:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000778:	2200      	movs	r2, #0
 800077a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_CAN1_Init+0xb4>)
 800077e:	2200      	movs	r2, #0
 8000780:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <MX_CAN1_Init+0xb4>)
 8000784:	f000 fcd8 	bl	8001138 <HAL_CAN_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 fa01 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef  sFilterConfig;

    /* Configure the CAN Filter */
    sFilterConfig.FilterBank = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80007b6:	230e      	movs	r3, #14
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <MX_CAN1_Init+0xb4>)
 80007c0:	f000 fdb6 	bl	8001330 <HAL_CAN_ConfigFilter>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_CAN1_Init+0x9a>
    {
   	 /* Filter configuration Error */
   	 Error_Handler();
 80007ca:	f000 f9e3 	bl	8000b94 <Error_Handler>
    }

    /* Start the CAN peripheral */
    if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_CAN1_Init+0xb4>)
 80007d0:	f000 fe8e 	bl	80014f0 <HAL_CAN_Start>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_CAN1_Init+0xaa>
    {
      /* Start Error */
      Error_Handler();
 80007da:	f000 f9db 	bl	8000b94 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000050 	.word	0x20000050
 80007ec:	40006400 	.word	0x40006400

080007f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_RTC_Init+0x30>)
 80007f6:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <MX_RTC_Init+0x34>)
 80007f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_RTC_Init+0x30>)
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_RTC_Init+0x30>)
 8000804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000808:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_RTC_Init+0x30>)
 800080c:	f002 f8e8 	bl	80029e0 <HAL_RTC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000816:	f000 f9bd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000078 	.word	0x20000078
 8000824:	40002800 	.word	0x40002800

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0x64>)
 800087a:	f002 f9ba 	bl	8002bf2 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 f986 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000008c 	.word	0x2000008c
 8000890:	40013000 	.word	0x40013000

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM1_Init+0x98>)
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <MX_TIM1_Init+0x9c>)
 80008b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_TIM1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM1_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_TIM1_Init+0x98>)
 80008c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_TIM1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_TIM1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_TIM1_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_TIM1_Init+0x98>)
 80008de:	f002 ff0f 	bl	8003700 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f954 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_TIM1_Init+0x98>)
 80008fa:	f002 ff50 	bl	800379e <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000904:	f000 f946 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_TIM1_Init+0x98>)
 8000916:	f003 f90b 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 f938 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000e4 	.word	0x200000e4
 8000930:	40012c00 	.word	0x40012c00

08000934 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART1_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800096c:	f003 f946 	bl	8003bfc <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f90d 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000012c 	.word	0x2000012c
 8000984:	40013800 	.word	0x40013800

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800098e:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_USART2_UART_Init+0x50>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 8000994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f003 f91c 	bl	8003bfc <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ca:	f000 f8e3 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000174 	.word	0x20000174
 80009d8:	40004400 	.word	0x40004400

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART3_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART3_UART_Init+0x4c>)
 8000a14:	f003 f8f2 	bl	8003bfc <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f8b9 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200001bc 	.word	0x200001bc
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a44:	4b3b      	ldr	r3, [pc, #236]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a3a      	ldr	r2, [pc, #232]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0320 	and.w	r3, r3, #32
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5c:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b32      	ldr	r3, [pc, #200]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0310 	and.w	r3, r3, #16
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_GPIO_Init+0x104>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	4823      	ldr	r0, [pc, #140]	; (8000b38 <MX_GPIO_Init+0x108>)
 8000aaa:	f000 ffe4 	bl	8001a76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4822      	ldr	r0, [pc, #136]	; (8000b3c <MX_GPIO_Init+0x10c>)
 8000ab4:	f000 ffdf 	bl	8001a76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	481a      	ldr	r0, [pc, #104]	; (8000b38 <MX_GPIO_Init+0x108>)
 8000ad0:	f000 fe36 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_GPIO_Init+0x110>)
 8000ae8:	f000 fe2a 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <MX_GPIO_Init+0x10c>)
 8000b04:	f000 fe1c 	bl	8001740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // SPI CS Pin
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_GPIO_Init+0x110>)
 8000b1c:	f000 fe10 	bl	8001740 <HAL_GPIO_Init>

  // 设置默认为高
  W25N512_CS_HIGH();
 8000b20:	2201      	movs	r2, #1
 8000b22:	2110      	movs	r1, #16
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <MX_GPIO_Init+0x110>)
 8000b26:	f000 ffa6 	bl	8001a76 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40011000 	.word	0x40011000
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	40010800 	.word	0x40010800

08000b44 <W25N512GVEIG_ReadDeviceID>:

/* USER CODE BEGIN 4 */

// 从W25N512GVEIG读取DEVICE ID的函�??????
uint8_t W25N512GVEIG_ReadDeviceID(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
    uint8_t device_id[4];
    device_id[3] = 0xFF;
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	71fb      	strb	r3, [r7, #7]

    W25N512_CS_LOW();
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2110      	movs	r1, #16
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <W25N512GVEIG_ReadDeviceID+0x48>)
 8000b54:	f000 ff8f 	bl	8001a76 <HAL_GPIO_WritePin>

    uint8_t cmd = W25N_DEVICE_ID_READ_CMD;
 8000b58:	239f      	movs	r3, #159	; 0x9f
 8000b5a:	70fb      	strb	r3, [r7, #3]
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8000b5c:	1cf9      	adds	r1, r7, #3
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	2201      	movs	r2, #1
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <W25N512GVEIG_ReadDeviceID+0x4c>)
 8000b66:	f002 f8c8 	bl	8002cfa <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, device_id, 4, HAL_MAX_DELAY);
 8000b6a:	1d39      	adds	r1, r7, #4
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	2204      	movs	r2, #4
 8000b72:	4807      	ldr	r0, [pc, #28]	; (8000b90 <W25N512GVEIG_ReadDeviceID+0x4c>)
 8000b74:	f002 fa04 	bl	8002f80 <HAL_SPI_Receive>

    W25N512_CS_HIGH();
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <W25N512GVEIG_ReadDeviceID+0x48>)
 8000b7e:	f000 ff7a 	bl	8001a76 <HAL_GPIO_WritePin>

   // return device_id[0];//return Dummy
   // return device_id[1];
   // return device_id[2];
    return device_id[3];
 8000b82:	79fb      	ldrb	r3, [r7, #7]

}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	2000008c 	.word	0x2000008c

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a14      	ldr	r2, [pc, #80]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_MspInit+0x5c>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_MspInit+0x60>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_MspInit+0x60>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000

08000c04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a25      	ldr	r2, [pc, #148]	; (8000cb4 <HAL_CAN_MspInit+0xb0>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d143      	bne.n	8000cac <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_CAN_MspInit+0xb4>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4814      	ldr	r0, [pc, #80]	; (8000cbc <HAL_CAN_MspInit+0xb8>)
 8000c6a:	f000 fd69 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480e      	ldr	r0, [pc, #56]	; (8000cbc <HAL_CAN_MspInit+0xb8>)
 8000c84:	f000 fd5c 	bl	8001740 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_CAN_MspInit+0xbc>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_CAN_MspInit+0xbc>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40006400 	.word	0x40006400
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40010000 	.word	0x40010000

08000cc4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <HAL_RTC_MspInit+0x3c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d110      	bne.n	8000cf8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cd6:	f000 fee7 	bl	8001aa8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_RTC_MspInit+0x40>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a09      	ldr	r2, [pc, #36]	; (8000d04 <HAL_RTC_MspInit+0x40>)
 8000ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_RTC_MspInit+0x40>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_RTC_MspInit+0x44>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40002800 	.word	0x40002800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	4242043c 	.word	0x4242043c

08000d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_SPI_MspInit+0x88>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d12f      	bne.n	8000d8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_SPI_MspInit+0x8c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d5c:	23a0      	movs	r3, #160	; 0xa0
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_SPI_MspInit+0x90>)
 8000d70:	f000 fce6 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_SPI_MspInit+0x90>)
 8000d88:	f000 fcda 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <HAL_TIM_Base_MspInit+0x34>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000db8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbc:	6193      	str	r3, [r2, #24]
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_TIM_Base_MspInit+0x38>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08e      	sub	sp, #56	; 0x38
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a5c      	ldr	r2, [pc, #368]	; (8000f68 <HAL_UART_MspInit+0x18c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d132      	bne.n	8000e62 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfc:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a5a      	ldr	r2, [pc, #360]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	623b      	str	r3, [r7, #32]
 8000e12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b55      	ldr	r3, [pc, #340]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	484b      	ldr	r0, [pc, #300]	; (8000f70 <HAL_UART_MspInit+0x194>)
 8000e42:	f000 fc7d 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4845      	ldr	r0, [pc, #276]	; (8000f70 <HAL_UART_MspInit+0x194>)
 8000e5c:	f000 fc70 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e60:	e07e      	b.n	8000f60 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <HAL_UART_MspInit+0x198>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d130      	bne.n	8000ece <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a3e      	ldr	r2, [pc, #248]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a38      	ldr	r2, [pc, #224]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4830      	ldr	r0, [pc, #192]	; (8000f70 <HAL_UART_MspInit+0x194>)
 8000eb0:	f000 fc46 	bl	8001740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	482a      	ldr	r0, [pc, #168]	; (8000f70 <HAL_UART_MspInit+0x194>)
 8000ec8:	f000 fc3a 	bl	8001740 <HAL_GPIO_Init>
}
 8000ecc:	e048      	b.n	8000f60 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a29      	ldr	r2, [pc, #164]	; (8000f78 <HAL_UART_MspInit+0x19c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d143      	bne.n	8000f60 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee2:	61d3      	str	r3, [r2, #28]
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x190>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x1a0>)
 8000f1e:	f000 fc0f 	bl	8001740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x1a0>)
 8000f38:	f000 fc02 	bl	8001740 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_UART_MspInit+0x1a4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
 8000f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
 8000f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	637b      	str	r3, [r7, #52]	; 0x34
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_UART_MspInit+0x1a4>)
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	6053      	str	r3, [r2, #4]
}
 8000f60:	bf00      	nop
 8000f62:	3738      	adds	r7, #56	; 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40004400 	.word	0x40004400
 8000f78:	40004800 	.word	0x40004800
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40010000 	.word	0x40010000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 f875 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
	...

08000fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe0:	f7ff fff7 	bl	8000fd2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ffc:	4c09      	ldr	r4, [pc, #36]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100a:	f003 fd59 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fa8d 	bl	800052c <main>
  bx lr
 8001012:	4770      	bx	lr
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800101c:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8001020:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001024:	200006c0 	.word	0x200006c0

08001028 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x28>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 fb4b 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	200f      	movs	r0, #15
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fdaa 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fb55 	bl	8001726 <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 fb2b 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000010 	.word	0x20000010
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <HAL_IncTick+0x20>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	20000010 	.word	0x20000010
 80010d8:	20000204 	.word	0x20000204

080010dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	20000204 	.word	0x20000204

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff fff0 	bl	80010dc <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffe0 	bl	80010dc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000010 	.word	0x20000010

08001138 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0ed      	b.n	8001326 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d102      	bne.n	800115c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fd54 	bl	8000c04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff ffb6 	bl	80010dc <HAL_GetTick>
 8001170:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001172:	e012      	b.n	800119a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001174:	f7ff ffb2 	bl	80010dc <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d90b      	bls.n	800119a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2205      	movs	r2, #5
 8001192:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0c5      	b.n	8001326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0e5      	beq.n	8001174 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0202 	bic.w	r2, r2, #2
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011b8:	f7ff ff90 	bl	80010dc <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011be:	e012      	b.n	80011e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c0:	f7ff ff8c 	bl	80010dc <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b0a      	cmp	r3, #10
 80011cc:	d90b      	bls.n	80011e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2205      	movs	r2, #5
 80011de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e09f      	b.n	8001326 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e5      	bne.n	80011c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7e5b      	ldrb	r3, [r3, #25]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e9b      	ldrb	r3, [r3, #26]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0220 	bic.w	r2, r2, #32
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7edb      	ldrb	r3, [r3, #27]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0210 	bic.w	r2, r2, #16
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0210 	orr.w	r2, r2, #16
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7f1b      	ldrb	r3, [r3, #28]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0208 	orr.w	r2, r2, #8
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0208 	bic.w	r2, r2, #8
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7f5b      	ldrb	r3, [r3, #29]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0204 	orr.w	r2, r2, #4
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0204 	bic.w	r2, r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	ea42 0103 	orr.w	r1, r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001346:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001348:	7cfb      	ldrb	r3, [r7, #19]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d003      	beq.n	8001356 <HAL_CAN_ConfigFilter+0x26>
 800134e:	7cfb      	ldrb	r3, [r7, #19]
 8001350:	2b02      	cmp	r3, #2
 8001352:	f040 80be 	bne.w	80014d2 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001356:	4b65      	ldr	r3, [pc, #404]	; (80014ec <HAL_CAN_ConfigFilter+0x1bc>)
 8001358:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001370:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	401a      	ands	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d123      	bne.n	8001400 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3248      	adds	r2, #72	; 0x48
 80013e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013f6:	6979      	ldr	r1, [r7, #20]
 80013f8:	3348      	adds	r3, #72	; 0x48
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d122      	bne.n	800144e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001428:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	3248      	adds	r2, #72	; 0x48
 800142e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001442:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001444:	6979      	ldr	r1, [r7, #20]
 8001446:	3348      	adds	r3, #72	; 0x48
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001468:	e007      	b.n	800147a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	431a      	orrs	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	401a      	ands	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001494:	e007      	b.n	80014a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	431a      	orrs	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c4:	f023 0201 	bic.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e006      	b.n	80014e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
  }
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40006400 	.word	0x40006400

080014f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d12e      	bne.n	8001562 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fdde 	bl	80010dc <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001522:	e012      	b.n	800154a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001524:	f7ff fdda 	bl	80010dc <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b0a      	cmp	r3, #10
 8001530:	d90b      	bls.n	800154a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e012      	b.n	8001570 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e5      	bne.n	8001524 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e006      	b.n	8001570 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
  }
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff90 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff49 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff5e 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff90 	bl	8001630 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5f 	bl	80015dc <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffb0 	bl	8001694 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	; 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	; (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	; (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	; (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	; (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	; (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	; (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	492c      	ldr	r1, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	; (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	; 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	807b      	strh	r3, [r7, #2]
 8001a82:	4613      	mov	r3, r2
 8001a84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a86:	787b      	ldrb	r3, [r7, #1]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8c:	887a      	ldrh	r2, [r7, #2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a92:	e003      	b.n	8001a9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	041a      	lsls	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_PWR_EnableBkUpAccess+0x14>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	420e0020 	.word	0x420e0020

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e304      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4b8f      	ldr	r3, [pc, #572]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
 8001af8:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d06c      	beq.n	8001bec <HAL_RCC_OscConfig+0x12c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d168      	bne.n	8001bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e2de      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76>
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e02e      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7a      	ldr	r2, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0xbc>
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6a      	ldr	r2, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a67      	ldr	r2, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fa9e 	bl	80010dc <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fa9a 	bl	80010dc <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e292      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe4>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa8a 	bl	80010dc <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fa86 	bl	80010dc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e27e      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x10c>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e252      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4939      	ldr	r1, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fa3f 	bl	80010dc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa3b 	bl	80010dc <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e233      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4927      	ldr	r1, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa1e 	bl	80010dc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fa1a 	bl	80010dc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e212      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03a      	beq.n	8001d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d019      	beq.n	8001d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f9fe 	bl	80010dc <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f9fa 	bl	80010dc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1f2      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 fbca 	bl	800249c <RCC_Delay>
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff f9e4 	bl	80010dc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff f9e0 	bl	80010dc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d908      	bls.n	8001d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1d8      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	42420000 	.word	0x42420000
 8001d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e9      	bne.n	8001d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80a6 	beq.w	8001e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b94      	ldr	r3, [pc, #592]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f9a1 	bl	80010dc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff f99d 	bl	80010dc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e195      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x312>
 8001dc4:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x356>
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001e16:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a60      	ldr	r2, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f951 	bl	80010dc <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7ff f94d 	bl	80010dc <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e143      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x37e>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff f93b 	bl	80010dc <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7ff f937 	bl	80010dc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e12d      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b45      	ldr	r3, [pc, #276]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 808c 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d14e      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ef      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f8eb 	bl	80010dc <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f0a:	f7ff f8e7 	bl	80010dc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0df      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	491c      	ldr	r1, [pc, #112]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4918      	ldr	r1, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f8c3 	bl	80010dc <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f5a:	f7ff f8bf 	bl	80010dc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0b7      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x49a>
 8001f78:	e022      	b.n	8001fc0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff f8a6 	bl	80010dc <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f94:	f7ff f8a2 	bl	80010dc <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e09a      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e9      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8088 	beq.w	80020da <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d068      	beq.n	80020a8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d14d      	bne.n	800207a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f87a 	bl	80010dc <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f876 	bl	80010dc <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e06e      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d10f      	bne.n	8002034 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4931      	ldr	r1, [pc, #196]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800201e:	4313      	orrs	r3, r2
 8002020:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f023 020f 	bic.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	492d      	ldr	r1, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002030:	4313      	orrs	r3, r2
 8002032:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	430b      	orrs	r3, r1
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff f843 	bl	80010dc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff f83f 	bl	80010dc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e037      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x59a>
 8002078:	e02f      	b.n	80020da <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff f82c 	bl	80010dc <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7ff f828 	bl	80010dc <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e020      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c8>
 80020a6:	e018      	b.n	80020da <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e013      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe ff7e 	bl	80010dc <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe ff7a 	bl	80010dc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fedc 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08004be0 	.word	0x08004be0
 80022b8:	20000008 	.word	0x20000008
 80022bc:	2000000c 	.word	0x2000000c

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b08e      	sub	sp, #56	; 0x38
 80022c6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d002      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d003      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022f8:	e089      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCC_GetSysClockFreq+0x164>)
 80022fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022fe:	e089      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d072      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f003 020f 	and.w	r2, r3, #15
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002322:	5c9b      	ldrb	r3, [r3, r2]
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d053      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	3301      	adds	r3, #1
 800233e:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3302      	adds	r3, #2
 800234c:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2200      	movs	r2, #0
 8002352:	469a      	mov	sl, r3
 8002354:	4693      	mov	fp, r2
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	2200      	movs	r2, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	617a      	str	r2, [r7, #20]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fb03 f20b 	mul.w	r2, r3, fp
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fb0a f303 	mul.w	r3, sl, r3
 800236a:	4413      	add	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	fbaa 0102 	umull	r0, r1, sl, r2
 8002372:	440b      	add	r3, r1
 8002374:	4619      	mov	r1, r3
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_RCC_GetSysClockFreq+0x164>)
 8002378:	fb03 f201 	mul.w	r2, r3, r1
 800237c:	2300      	movs	r3, #0
 800237e:	fb00 f303 	mul.w	r3, r0, r3
 8002382:	4413      	add	r3, r2
 8002384:	4a27      	ldr	r2, [pc, #156]	; (8002424 <HAL_RCC_GetSysClockFreq+0x164>)
 8002386:	fba0 4502 	umull	r4, r5, r0, r2
 800238a:	442b      	add	r3, r5
 800238c:	461d      	mov	r5, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2200      	movs	r2, #0
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	60fa      	str	r2, [r7, #12]
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	2200      	movs	r2, #0
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023a2:	460b      	mov	r3, r1
 80023a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023a8:	4652      	mov	r2, sl
 80023aa:	fb02 f203 	mul.w	r2, r2, r3
 80023ae:	465b      	mov	r3, fp
 80023b0:	4684      	mov	ip, r0
 80023b2:	fb0c f303 	mul.w	r3, ip, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	4602      	mov	r2, r0
 80023ba:	4651      	mov	r1, sl
 80023bc:	fba2 8901 	umull	r8, r9, r2, r1
 80023c0:	444b      	add	r3, r9
 80023c2:	4699      	mov	r9, r3
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff2a 	bl	8000224 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4613      	mov	r3, r2
 80023d6:	637b      	str	r3, [r7, #52]	; 0x34
 80023d8:	e007      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_RCC_GetSysClockFreq+0x164>)
 80023de:	fb03 f202 	mul.w	r2, r3, r2
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 80023ec:	7b5b      	ldrb	r3, [r3, #13]
 80023ee:	461a      	mov	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
 80023fc:	e004      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0x170>)
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240c:	e002      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_GetSysClockFreq+0x174>)
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002416:	4618      	mov	r0, r3
 8002418:	3738      	adds	r7, #56	; 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	017d7840 	.word	0x017d7840
 8002428:	08004bf8 	.word	0x08004bf8
 800242c:	08004c08 	.word	0x08004c08
 8002430:	003d0900 	.word	0x003d0900
 8002434:	007a1200 	.word	0x007a1200

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <HAL_RCC_GetHCLKFreq+0x10>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000008 	.word	0x20000008

0800244c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002450:	f7ff fff2 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	4903      	ldr	r1, [pc, #12]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	08004bf0 	.word	0x08004bf0

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002478:	f7ff ffde 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4903      	ldr	r1, [pc, #12]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002490:	4618      	mov	r0, r3
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	08004bf0 	.word	0x08004bf0

0800249c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <RCC_Delay+0x34>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <RCC_Delay+0x38>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a5b      	lsrs	r3, r3, #9
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024b8:	bf00      	nop
  }
  while (Delay --);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	60fa      	str	r2, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <RCC_Delay+0x1c>
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	20000008 	.word	0x20000008
 80024d4:	10624dd3 	.word	0x10624dd3

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4a87      	ldr	r2, [pc, #540]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	61d3      	str	r3, [r2, #28]
 8002514:	4b85      	ldr	r3, [pc, #532]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b82      	ldr	r3, [pc, #520]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d118      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002530:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a7e      	ldr	r2, [pc, #504]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253c:	f7fe fdce 	bl	80010dc <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	e008      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fdca 	bl	80010dc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0e5      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02e      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d027      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800258a:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002590:	4b68      	ldr	r3, [pc, #416]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002596:	4a65      	ldr	r2, [pc, #404]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d014      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a6:	f7fe fd99 	bl	80010dc <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7fe fd95 	bl	80010dc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0ae      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ee      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d0:	4b56      	ldr	r3, [pc, #344]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4953      	ldr	r1, [pc, #332]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025e2:	7efb      	ldrb	r3, [r7, #27]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a4f      	ldr	r2, [pc, #316]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002600:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4947      	ldr	r1, [pc, #284]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4940      	ldr	r1, [pc, #256]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800262c:	4313      	orrs	r3, r2
 800262e:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800263c:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4938      	ldr	r1, [pc, #224]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800264a:	4313      	orrs	r3, r2
 800264c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d105      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d148      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d138      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800267c:	4b2b      	ldr	r3, [pc, #172]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e042      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4920      	ldr	r1, [pc, #128]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	491c      	ldr	r1, [pc, #112]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c6:	f7fe fd09 	bl	80010dc <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ce:	f7fe fd05 	bl	80010dc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	; 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e020      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80026ec:	e009      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d001      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00f      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4904      	ldr	r1, [pc, #16]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	42420440 	.word	0x42420440
 8002738:	42420070 	.word	0x42420070

0800273c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
#if defined(STM32F105xC) || defined(STM32F107xC)
  static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3b01      	subs	r3, #1
 8002768:	2b0f      	cmp	r3, #15
 800276a:	f200 811d 	bhi.w	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x38>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002929 	.word	0x08002929
 8002778:	0800298d 	.word	0x0800298d
 800277c:	080029a9 	.word	0x080029a9
 8002780:	08002887 	.word	0x08002887
 8002784:	080029a9 	.word	0x080029a9
 8002788:	080029a9 	.word	0x080029a9
 800278c:	080029a9 	.word	0x080029a9
 8002790:	080028d9 	.word	0x080028d9
 8002794:	080029a9 	.word	0x080029a9
 8002798:	080029a9 	.word	0x080029a9
 800279c:	080029a9 	.word	0x080029a9
 80027a0:	080029a9 	.word	0x080029a9
 80027a4:	080029a9 	.word	0x080029a9
 80027a8:	080029a9 	.word	0x080029a9
 80027ac:	080029a9 	.word	0x080029a9
 80027b0:	080027b5 	.word	0x080027b5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80027b4:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60bb      	str	r3, [r7, #8]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027ba:	4b82      	ldr	r3, [pc, #520]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80f2 	beq.w	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	0c9b      	lsrs	r3, r3, #18
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	4a7d      	ldr	r2, [pc, #500]	; (80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80027d2:	5cd3      	ldrb	r3, [r2, r3]
 80027d4:	61bb      	str	r3, [r7, #24]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03b      	beq.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80027e0:	4b78      	ldr	r3, [pc, #480]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	4a78      	ldr	r2, [pc, #480]	; (80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80027ea:	5cd3      	ldrb	r3, [r2, r3]
 80027ec:	61fb      	str	r3, [r7, #28]
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /* STM32F105xC || STM32F107xC || STM32F100xB || STM32F100xE */

#if defined(STM32F105xC) || defined(STM32F107xC)
          if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80027ee:	4b75      	ldr	r3, [pc, #468]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01c      	beq.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          {
            /* PLL2 selected as Prediv1 source */
            /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
            prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80027fa:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	3301      	adds	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
            pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002808:	4b6e      	ldr	r3, [pc, #440]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	3302      	adds	r3, #2
 8002814:	617b      	str	r3, [r7, #20]
            pllclk = (uint32_t)((((HSE_VALUE / prediv2) * pll2mul) / prediv1) * pllmul);
 8002816:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	fb03 f202 	mul.w	r2, r3, r2
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	fbb2 f2f3 	udiv	r2, r2, r3
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	e007      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          }
          else
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002834:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
          }

          /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
          /* In this case need to divide pllclk by 2 */
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002844:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8002846:	7b5b      	ldrb	r3, [r3, #13]
 8002848:	461a      	mov	r2, r3
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4293      	cmp	r3, r2
 800284e:	d108      	bne.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
          {
            pllclk = pllclk / 2;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	e004      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4a5e      	ldr	r2, [pc, #376]	; (80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
        }

        /* Calcul of the USB frequency*/
#if defined(STM32F105xC) || defined(STM32F107xC)
        /* USBCLK = PLLVCO = (2 x PLLCLK) / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL_DIV2)
 8002862:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286e:	d102      	bne.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        {
          /* Prescaler of 2 selected for USB */
          frequency = pllclk;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	623b      	str	r3, [r7, #32]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002874:	e09a      	b.n	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
          frequency = (2 * pllclk) / 3;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800287c:	fba2 2303 	umull	r2, r3, r2, r3
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	623b      	str	r3, [r7, #32]
      break;
 8002884:	e092      	b.n	80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S2_SOURCE() == RCC_I2S2CLKSOURCE_SYSCLK)
 8002886:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      {
        /* SYSCLK used as source clock for I2S2 */
        frequency = HAL_RCC_GetSysClockFreq();
 8002892:	f7ff fd15 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8002896:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002898:	e08a      	b.n	80029b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8084 	beq.w	80029b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80028a8:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	3301      	adds	r3, #1
 80028b4:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 80028b6:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	0b1b      	lsrs	r3, r3, #12
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	3302      	adds	r3, #2
 80028c2:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 80028c4:	4a42      	ldr	r2, [pc, #264]	; (80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	623b      	str	r3, [r7, #32]
      break;
 80028d6:	e06b      	b.n	80029b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
#else
      if (__HAL_RCC_GET_I2S3_SOURCE() == RCC_I2S3CLKSOURCE_SYSCLK)
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
      {
        /* SYSCLK used as source clock for I2S3 */
        frequency = HAL_RCC_GetSysClockFreq();
 80028e4:	f7ff fcec 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 80028e8:	6238      	str	r0, [r7, #32]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80028ea:	e063      	b.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON))
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05d      	beq.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80028f8:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
 8002906:	4b2f      	ldr	r3, [pc, #188]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	0b1b      	lsrs	r3, r3, #12
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	3302      	adds	r3, #2
 8002912:	613b      	str	r3, [r7, #16]
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
 8002914:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	623b      	str	r3, [r7, #32]
      break;
 8002926:	e045      	b.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002928:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	60bb      	str	r3, [r7, #8]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002938:	d108      	bne.n	800294c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
      {
        frequency = LSE_VALUE;
 8002944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	e01e      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002956:	d109      	bne.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      {
        frequency = LSI_VALUE;
 8002964:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	e00e      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002976:	d11f      	bne.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d019      	beq.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      {
        frequency = HSE_VALUE / 128U;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8002986:	623b      	str	r3, [r7, #32]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002988:	e016      	b.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800298a:	e015      	b.n	80029b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800298c:	f7ff fd72 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0b9b      	lsrs	r3, r3, #14
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	3301      	adds	r3, #1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	623b      	str	r3, [r7, #32]
      break;
 80029a6:	e008      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
    }
    default:
    {
      break;
 80029a8:	bf00      	nop
 80029aa:	e006      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80029ac:	bf00      	nop
 80029ae:	e004      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80029b0:	bf00      	nop
 80029b2:	e002      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80029b4:	bf00      	nop
 80029b6:	e000      	b.n	80029ba <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
      break;
 80029b8:	bf00      	nop
    }
  }
  return (frequency);
 80029ba:	6a3b      	ldr	r3, [r7, #32]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	08004c18 	.word	0x08004c18
 80029cc:	08004c28 	.word	0x08004c28
 80029d0:	017d7840 	.word	0x017d7840
 80029d4:	003d0900 	.word	0x003d0900
 80029d8:	aaaaaaab 	.word	0xaaaaaaab
 80029dc:	0002faf0 	.word	0x0002faf0

080029e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07a      	b.n	8002aec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7c5b      	ldrb	r3, [r3, #17]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f95c 	bl	8000cc4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f870 	bl	8002af8 <HAL_RTC_WaitForSynchro>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d004      	beq.n	8002a28 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e061      	b.n	8002aec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f892 	bl	8002b52 <RTC_EnterInitMode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2204      	movs	r2, #4
 8002a38:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e056      	b.n	8002aec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0207 	bic.w	r2, r2, #7
 8002a4c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_RTC_Init+0x114>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_RTC_Init+0x114>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RTC_Init+0x114>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4921      	ldr	r1, [pc, #132]	; (8002af4 <HAL_RTC_Init+0x114>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d003      	beq.n	8002a86 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e00e      	b.n	8002aa4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff fe58 	bl	800273c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a8c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e026      	b.n	8002aec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0c1a      	lsrs	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 020f 	and.w	r2, r2, #15
 8002ab0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f870 	bl	8002ba2 <RTC_ExitInitMode>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2204      	movs	r2, #4
 8002acc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00c      	b.n	8002aec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40006c00 	.word	0x40006c00

08002af8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e01d      	b.n	8002b4a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0208 	bic.w	r2, r2, #8
 8002b1c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b1e:	f7fe fadd 	bl	80010dc <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b24:	e009      	b.n	8002b3a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b26:	f7fe fad9 	bl	80010dc <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b34:	d901      	bls.n	8002b3a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e007      	b.n	8002b4a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ee      	beq.n	8002b26 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002b5e:	f7fe fabd 	bl	80010dc <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b64:	e009      	b.n	8002b7a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b66:	f7fe fab9 	bl	80010dc <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b74:	d901      	bls.n	8002b7a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e00f      	b.n	8002b9a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ee      	beq.n	8002b66 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0210 	orr.w	r2, r2, #16
 8002b96:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0210 	bic.w	r2, r2, #16
 8002bbc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002bbe:	f7fe fa8d 	bl	80010dc <HAL_GetTick>
 8002bc2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bc4:	e009      	b.n	8002bda <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bc6:	f7fe fa89 	bl	80010dc <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bd4:	d901      	bls.n	8002bda <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e007      	b.n	8002bea <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e076      	b.n	8002cf2 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d108      	bne.n	8002c1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c14:	d009      	beq.n	8002c2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	61da      	str	r2, [r3, #28]
 8002c1c:	e005      	b.n	8002c2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fe f861 	bl	8000d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	0c1a      	lsrs	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f002 0204 	and.w	r2, r2, #4
 8002cd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b088      	sub	sp, #32
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Transmit+0x22>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e12d      	b.n	8002f78 <HAL_SPI_Transmit+0x27e>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d24:	f7fe f9da 	bl	80010dc <HAL_GetTick>
 8002d28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d3e:	e116      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_SPI_Transmit+0x52>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d50:	e10d      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	88fa      	ldrh	r2, [r7, #6]
 8002d6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d98:	d10f      	bne.n	8002dba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d007      	beq.n	8002dd8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de0:	d14f      	bne.n	8002e82 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0xf6>
 8002dea:	8afb      	ldrh	r3, [r7, #22]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d142      	bne.n	8002e76 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e14:	e02f      	b.n	8002e76 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d112      	bne.n	8002e4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e48:	e015      	b.n	8002e76 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4a:	f7fe f947 	bl	80010dc <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Transmit+0x168>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Transmit+0x16e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e74:	e07b      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ca      	bne.n	8002e16 <HAL_SPI_Transmit+0x11c>
 8002e80:	e050      	b.n	8002f24 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_SPI_Transmit+0x196>
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d144      	bne.n	8002f1a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb6:	e030      	b.n	8002f1a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d113      	bne.n	8002eee <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	7812      	ldrb	r2, [r2, #0]
 8002ed2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8002eec:	e015      	b.n	8002f1a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eee:	f7fe f8f5 	bl	80010dc <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d803      	bhi.n	8002f06 <HAL_SPI_Transmit+0x20c>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x212>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f18:	e029      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1c9      	bne.n	8002eb8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	6839      	ldr	r1, [r7, #0]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fbcb 	bl	80036c4 <SPI_EndRxTxTransaction>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e003      	b.n	8002f6e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d002      	beq.n	8002fa6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa4:	e0fb      	b.n	800319e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d112      	bne.n	8002fd6 <HAL_SPI_Receive+0x56>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10e      	bne.n	8002fd6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2204      	movs	r2, #4
 8002fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f8ef 	bl	80031b0 <HAL_SPI_TransmitReceive>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	e0e8      	b.n	80031a8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_SPI_Receive+0x64>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e0e1      	b.n	80031a8 <HAL_SPI_Receive+0x228>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fec:	f7fe f876 	bl	80010dc <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Receive+0x7e>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003002:	e0cc      	b.n	800319e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2204      	movs	r2, #4
 8003008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	88fa      	ldrh	r2, [r7, #6]
 8003022:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800304a:	d10f      	bne.n	800306c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d007      	beq.n	800308a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d16a      	bne.n	8003168 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003092:	e032      	b.n	80030fa <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d115      	bne.n	80030ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f103 020c 	add.w	r2, r3, #12
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030cc:	e015      	b.n	80030fa <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ce:	f7fe f805 	bl	80010dc <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d803      	bhi.n	80030e6 <HAL_SPI_Receive+0x166>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d102      	bne.n	80030ec <HAL_SPI_Receive+0x16c>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030f8:	e051      	b.n	800319e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1c7      	bne.n	8003094 <HAL_SPI_Receive+0x114>
 8003104:	e035      	b.n	8003172 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d113      	bne.n	800313c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	b292      	uxth	r2, r2
 8003120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	87da      	strh	r2, [r3, #62]	; 0x3e
 800313a:	e015      	b.n	8003168 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313c:	f7fd ffce 	bl	80010dc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d803      	bhi.n	8003154 <HAL_SPI_Receive+0x1d4>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003152:	d102      	bne.n	800315a <HAL_SPI_Receive+0x1da>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003166:	e01a      	b.n	800319e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1c9      	bne.n	8003106 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa52 	bl	8003620 <SPI_EndRxTransaction>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
 8003194:	e003      	b.n	800319e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031be:	2301      	movs	r3, #1
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x26>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e198      	b.n	8003508 <HAL_SPI_TransmitReceive+0x358>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031de:	f7fd ff7d 	bl	80010dc <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d00f      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x70>
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003206:	d107      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <HAL_SPI_TransmitReceive+0x68>
 8003210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003214:	2b04      	cmp	r3, #4
 8003216:	d003      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003218:	2302      	movs	r3, #2
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800321e:	e16d      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x82>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x82>
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003238:	e160      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b04      	cmp	r3, #4
 8003244:	d003      	beq.n	800324e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2205      	movs	r2, #5
 800324a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	887a      	ldrh	r2, [r7, #2]
 800325e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	887a      	ldrh	r2, [r7, #2]
 8003276:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d007      	beq.n	80032a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032aa:	d17c      	bne.n	80033a6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x10a>
 80032b4:	8b7b      	ldrh	r3, [r7, #26]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d16a      	bne.n	8003390 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	881a      	ldrh	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	1c9a      	adds	r2, r3, #2
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032de:	e057      	b.n	8003390 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d11b      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x176>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d016      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x176>
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d113      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d119      	bne.n	8003368 <HAL_SPI_TransmitReceive+0x1b8>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d014      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	b292      	uxth	r2, r2
 800334a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	1c9a      	adds	r2, r3, #2
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003364:	2301      	movs	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003368:	f7fd feb8 	bl	80010dc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003374:	429a      	cmp	r2, r3
 8003376:	d80b      	bhi.n	8003390 <HAL_SPI_TransmitReceive+0x1e0>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d007      	beq.n	8003390 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800338e:	e0b5      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1a2      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x130>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d19d      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x130>
 80033a4:	e080      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x204>
 80033ae:	8b7b      	ldrh	r3, [r7, #26]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d16f      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033da:	e05b      	b.n	8003494 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d11c      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x274>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d017      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x274>
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d114      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	7812      	ldrb	r2, [r2, #0]
 8003406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d119      	bne.n	8003466 <HAL_SPI_TransmitReceive+0x2b6>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d014      	beq.n	8003466 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003466:	f7fd fe39 	bl	80010dc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003472:	429a      	cmp	r2, r3
 8003474:	d803      	bhi.n	800347e <HAL_SPI_TransmitReceive+0x2ce>
 8003476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d102      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x2d4>
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003492:	e033      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d19e      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x22c>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d199      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f909 	bl	80036c4 <SPI_EndRxTxTransaction>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034c4:	e01a      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e003      	b.n	80034fc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003508:	4618      	mov	r0, r3
 800350a:	3730      	adds	r7, #48	; 0x30
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003520:	f7fd fddc 	bl	80010dc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4413      	add	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003530:	f7fd fdd4 	bl	80010dc <HAL_GetTick>
 8003534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	015b      	lsls	r3, r3, #5
 800353c:	0d1b      	lsrs	r3, r3, #20
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003546:	e054      	b.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d050      	beq.n	80035f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003550:	f7fd fdc4 	bl	80010dc <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	429a      	cmp	r2, r3
 800355e:	d902      	bls.n	8003566 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13d      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357e:	d111      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	d004      	beq.n	8003594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d107      	bne.n	80035a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	d10f      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e017      	b.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d19b      	bne.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000008 	.word	0x20000008

08003620 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d111      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d004      	beq.n	800364a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d107      	bne.n	800365a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003658:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d117      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d112      	bne.n	8003694 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2200      	movs	r2, #0
 8003676:	2101      	movs	r1, #1
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ff49 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0220 	orr.w	r2, r3, #32
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e013      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff ff36 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d007      	beq.n	80036ba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e000      	b.n	80036bc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff18 	bl	8003510 <SPI_WaitFlagStateUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e000      	b.n	80036f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fb3a 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 f8f4 	bl	800392c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
 80037a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_TIM_ConfigClockSource+0x1c>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e0b4      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x186>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f2:	d03e      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0xd4>
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	f200 8087 	bhi.w	800390a <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003800:	f000 8086 	beq.w	8003910 <HAL_TIM_ConfigClockSource+0x172>
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d87f      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	2b70      	cmp	r3, #112	; 0x70
 800380c:	d01a      	beq.n	8003844 <HAL_TIM_ConfigClockSource+0xa6>
 800380e:	2b70      	cmp	r3, #112	; 0x70
 8003810:	d87b      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 8003812:	2b60      	cmp	r3, #96	; 0x60
 8003814:	d050      	beq.n	80038b8 <HAL_TIM_ConfigClockSource+0x11a>
 8003816:	2b60      	cmp	r3, #96	; 0x60
 8003818:	d877      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 800381a:	2b50      	cmp	r3, #80	; 0x50
 800381c:	d03c      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xfa>
 800381e:	2b50      	cmp	r3, #80	; 0x50
 8003820:	d873      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 8003822:	2b40      	cmp	r3, #64	; 0x40
 8003824:	d058      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0x13a>
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d86f      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 800382a:	2b30      	cmp	r3, #48	; 0x30
 800382c:	d064      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x15a>
 800382e:	2b30      	cmp	r3, #48	; 0x30
 8003830:	d86b      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 8003832:	2b20      	cmp	r3, #32
 8003834:	d060      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x15a>
 8003836:	2b20      	cmp	r3, #32
 8003838:	d867      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
 800383a:	2b00      	cmp	r3, #0
 800383c:	d05c      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x15a>
 800383e:	2b10      	cmp	r3, #16
 8003840:	d05a      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x15a>
 8003842:	e062      	b.n	800390a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	6899      	ldr	r1, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f000 f94d 	bl	8003af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003866:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]
      break;
 8003870:	e04f      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f000 f936 	bl	8003af2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e03c      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	461a      	mov	r2, r3
 80038a6:	f000 f8ad 	bl	8003a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2150      	movs	r1, #80	; 0x50
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f904 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80038b6:	e02c      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f000 f8cb 	bl	8003a60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2160      	movs	r1, #96	; 0x60
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f8f4 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80038d6:	e01c      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6859      	ldr	r1, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	461a      	mov	r2, r3
 80038e6:	f000 f88d 	bl	8003a04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f8e4 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80038f6:	e00c      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 f8db 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003908:	e003      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      break;
 800390e:	e000      	b.n	8003912 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <TIM_Base_SetConfig+0xc8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00f      	beq.n	8003964 <TIM_Base_SetConfig+0x38>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d00b      	beq.n	8003964 <TIM_Base_SetConfig+0x38>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a2a      	ldr	r2, [pc, #168]	; (80039f8 <TIM_Base_SetConfig+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d007      	beq.n	8003964 <TIM_Base_SetConfig+0x38>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <TIM_Base_SetConfig+0xd0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x38>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a28      	ldr	r2, [pc, #160]	; (8003a00 <TIM_Base_SetConfig+0xd4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <TIM_Base_SetConfig+0xc8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00f      	beq.n	800399e <TIM_Base_SetConfig+0x72>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d00b      	beq.n	800399e <TIM_Base_SetConfig+0x72>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <TIM_Base_SetConfig+0xcc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <TIM_Base_SetConfig+0x72>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <TIM_Base_SetConfig+0xd0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <TIM_Base_SetConfig+0x72>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <TIM_Base_SetConfig+0xd4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <TIM_Base_SetConfig+0xc8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d103      	bne.n	80039e4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	615a      	str	r2, [r3, #20]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800
 8003a00:	40000c00 	.word	0x40000c00

08003a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	031b      	lsls	r3, r3, #12
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e04b      	b.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a19      	ldr	r2, [pc, #100]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d00e      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d10c      	bne.n	8003bce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00

08003bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f8da 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f9af 	bl	8003fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d16d      	bne.n	8003d98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_UART_Transmit+0x2c>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e066      	b.n	8003d9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	; 0x21
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd f9ff 	bl	80010dc <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d108      	bne.n	8003d08 <HAL_UART_Transmit+0x6c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e003      	b.n	8003d10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d10:	e02a      	b.n	8003d68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f000 f8d2 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e036      	b.n	8003d9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	3302      	adds	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e007      	b.n	8003d5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	3301      	adds	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1cf      	bne.n	8003d12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8a2 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e006      	b.n	8003d9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d17c      	bne.n	8003ebc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Receive+0x2c>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e075      	b.n	8003ebe <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2222      	movs	r2, #34	; 0x22
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003de6:	f7fd f979 	bl	80010dc <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e00:	d108      	bne.n	8003e14 <HAL_UART_Receive+0x72>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e003      	b.n	8003e1c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e1c:	e043      	b.n	8003ea6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2120      	movs	r1, #32
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f84c 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e042      	b.n	8003ebe <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e01f      	b.n	8003e98 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	d007      	beq.n	8003e72 <HAL_UART_Receive+0xd0>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_UART_Receive+0xde>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e008      	b.n	8003e92 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1b6      	bne.n	8003e1e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b090      	sub	sp, #64	; 0x40
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e050      	b.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d04c      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ee6:	f7fd f8f9 	bl	80010dc <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d241      	bcs.n	8003f7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	330c      	adds	r3, #12
 8003f14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f16:	637a      	str	r2, [r7, #52]	; 0x34
 8003f18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	613b      	str	r3, [r7, #16]
   return(result);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3314      	adds	r3, #20
 8003f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4a:	623a      	str	r2, [r7, #32]
 8003f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	69f9      	ldr	r1, [r7, #28]
 8003f50:	6a3a      	ldr	r2, [r7, #32]
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00f      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4013      	ands	r3, r2
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	bf0c      	ite	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	2300      	movne	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d09f      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3740      	adds	r7, #64	; 0x40
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fde:	f023 030c 	bic.w	r3, r3, #12
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2c      	ldr	r2, [pc, #176]	; (80040b8 <UART_SetConfig+0x114>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d103      	bne.n	8004014 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fa32 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	e002      	b.n	800401a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fe fa1a 	bl	800244c <HAL_RCC_GetPCLK1Freq>
 8004018:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009a      	lsls	r2, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	4a22      	ldr	r2, [pc, #136]	; (80040bc <UART_SetConfig+0x118>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	0119      	lsls	r1, r3, #4
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	009a      	lsls	r2, r3, #2
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <UART_SetConfig+0x118>)
 8004052:	fba3 0302 	umull	r0, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2064      	movs	r0, #100	; 0x64
 800405a:	fb00 f303 	mul.w	r3, r0, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	3332      	adds	r3, #50	; 0x32
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <UART_SetConfig+0x118>)
 8004066:	fba2 2303 	umull	r2, r3, r2, r3
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004070:	4419      	add	r1, r3
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009a      	lsls	r2, r3, #2
 800407c:	441a      	add	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	fbb2 f2f3 	udiv	r2, r2, r3
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <UART_SetConfig+0x118>)
 800408a:	fba3 0302 	umull	r0, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2064      	movs	r0, #100	; 0x64
 8004092:	fb00 f303 	mul.w	r3, r0, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <UART_SetConfig+0x118>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	440a      	add	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040b0:	bf00      	nop
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40013800 	.word	0x40013800
 80040bc:	51eb851f 	.word	0x51eb851f

080040c0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80040c6:	4b21      	ldr	r3, [pc, #132]	; (800414c <_DoInit+0x8c>)
 80040c8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2203      	movs	r2, #3
 80040ce:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2203      	movs	r2, #3
 80040d4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <_DoInit+0x90>)
 80040da:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <_DoInit+0x94>)
 80040e0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a14      	ldr	r2, [pc, #80]	; (8004150 <_DoInit+0x90>)
 8004100:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <_DoInit+0x98>)
 8004106:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2210      	movs	r2, #16
 800410c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY(&p->acID[7], "RTT", 9);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3307      	adds	r3, #7
 8004124:	4a0d      	ldr	r2, [pc, #52]	; (800415c <_DoInit+0x9c>)
 8004126:	6810      	ldr	r0, [r2, #0]
 8004128:	6018      	str	r0, [r3, #0]
  STRCPY(&p->acID[0], "SEGGER", 7);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <_DoInit+0xa0>)
 800412e:	6810      	ldr	r0, [r2, #0]
 8004130:	6018      	str	r0, [r3, #0]
 8004132:	8891      	ldrh	r1, [r2, #4]
 8004134:	7992      	ldrb	r2, [r2, #6]
 8004136:	8099      	strh	r1, [r3, #4]
 8004138:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	719a      	strb	r2, [r3, #6]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000208 	.word	0x20000208
 8004150:	08004bc8 	.word	0x08004bc8
 8004154:	200002b0 	.word	0x200002b0
 8004158:	200006b0 	.word	0x200006b0
 800415c:	08004bd4 	.word	0x08004bd4
 8004160:	08004bd8 	.word	0x08004bd8

08004164 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004170:	2300      	movs	r3, #0
 8004172:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	429a      	cmp	r2, r3
 8004186:	d905      	bls.n	8004194 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e007      	b.n	80041a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	1acb      	subs	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	3b01      	subs	r3, #1
 80041a2:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bf28      	it	cs
 80041b2:	4613      	movcs	r3, r2
 80041b4:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bf28      	it	cs
 80041be:	4613      	movcs	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4413      	add	r3, r2
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc9a 	bl	8004b08 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	4413      	add	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d101      	bne.n	8004202 <_WriteBlocking+0x9e>
      WrOff = 0u;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1b5      	bne.n	800417a <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800420e:	69bb      	ldr	r3, [r7, #24]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d90e      	bls.n	800425a <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68b9      	ldr	r1, [r7, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fc5d 	bl	8004b08 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	441a      	add	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004258:	e01a      	b.n	8004290 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fc4c 	bl	8004b08 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6858      	ldr	r0, [r3, #4]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4619      	mov	r1, r3
 8004286:	f000 fc3f 	bl	8004b08 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	60da      	str	r2, [r3, #12]
}
 8004290:	bf00      	nop
 8004292:	3720      	adds	r7, #32
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d808      	bhi.n	80042c6 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	3b01      	subs	r3, #1
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e004      	b.n	80042d0 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
  }
  return r;
 80042d0:	697b      	ldr	r3, [r7, #20]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <SEGGER_RTT_WriteNoLock+0x9c>)
 80042fa:	4413      	add	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d029      	beq.n	800435a <SEGGER_RTT_WriteNoLock+0x7e>
 8004306:	2b02      	cmp	r3, #2
 8004308:	d82e      	bhi.n	8004368 <SEGGER_RTT_WriteNoLock+0x8c>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <SEGGER_RTT_WriteNoLock+0x38>
 800430e:	2b01      	cmp	r3, #1
 8004310:	d013      	beq.n	800433a <SEGGER_RTT_WriteNoLock+0x5e>
 8004312:	e029      	b.n	8004368 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ffbf 	bl	8004298 <_GetAvailWriteSpace>
 800431a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d202      	bcs.n	800432a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004328:	e021      	b.n	800436e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7ff ff70 	bl	8004218 <_WriteNoCheck>
    break;
 8004338:	e019      	b.n	800436e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ffac 	bl	8004298 <_GetAvailWriteSpace>
 8004340:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4293      	cmp	r3, r2
 8004348:	bf28      	it	cs
 800434a:	4613      	movcs	r3, r2
 800434c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	6978      	ldr	r0, [r7, #20]
 8004354:	f7ff ff60 	bl	8004218 <_WriteNoCheck>
    break;
 8004358:	e009      	b.n	800436e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	f7ff ff00 	bl	8004164 <_WriteBlocking>
 8004364:	61f8      	str	r0, [r7, #28]
    break;
 8004366:	e002      	b.n	800436e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
    break;
 800436c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800436e:	69fb      	ldr	r3, [r7, #28]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20000208 	.word	0x20000208

0800437c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <SEGGER_RTT_Write+0x44>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <SEGGER_RTT_Write+0x18>
 8004390:	f7ff fe96 	bl	80040c0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004394:	f3ef 8311 	mrs	r3, BASEPRI
 8004398:	f04f 0120 	mov.w	r1, #32
 800439c:	f381 8811 	msr	BASEPRI, r1
 80043a0:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff98 	bl	80042dc <SEGGER_RTT_WriteNoLock>
 80043ac:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 80043b4:	693b      	ldr	r3, [r7, #16]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20000208 	.word	0x20000208

080043c4 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d80e      	bhi.n	8004400 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d115      	bne.n	8004438 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6918      	ldr	r0, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	461a      	mov	r2, r3
 800441a:	f7ff ffaf 	bl	800437c <SEGGER_RTT_Write>
 800441e:	4602      	mov	r2, r0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	d004      	beq.n	8004432 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8004430:	e002      	b.n	8004438 <_StoreChar+0x74>
      p->Cnt = 0u;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004452:	2301      	movs	r3, #1
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004456:	2301      	movs	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800445a:	e007      	b.n	800446c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	623b      	str	r3, [r7, #32]
    Width++;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d2f3      	bcs.n	800445c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	429a      	cmp	r2, r3
 800447a:	d901      	bls.n	8004480 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d125      	bne.n	80044d6 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2b00      	cmp	r3, #0
 800448e:	d022      	beq.n	80044d6 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <_PrintUnsigned+0x66>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <_PrintUnsigned+0x66>
        c = '0';
 80044a0:	2330      	movs	r3, #48	; 0x30
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e001      	b.n	80044aa <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80044a6:	2320      	movs	r3, #32
 80044a8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044aa:	e00b      	b.n	80044c4 <_PrintUnsigned+0x84>
        FieldWidth--;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	3b01      	subs	r3, #1
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80044b2:	7efb      	ldrb	r3, [r7, #27]
 80044b4:	4619      	mov	r1, r3
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7ff ff84 	bl	80043c4 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db07      	blt.n	80044d4 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <_PrintUnsigned+0x96>
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3ec      	bcc.n	80044ac <_PrintUnsigned+0x6c>
 80044d2:	e000      	b.n	80044d6 <_PrintUnsigned+0x96>
          break;
 80044d4:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db55      	blt.n	800458a <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d903      	bls.n	80044ec <_PrintUnsigned+0xac>
        NumDigits--;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	603b      	str	r3, [r7, #0]
 80044ea:	e009      	b.n	8004500 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d200      	bcs.n	8004500 <_PrintUnsigned+0xc0>
          break;
 80044fe:	e005      	b.n	800450c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	fb02 f303 	mul.w	r3, r2, r3
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800450a:	e7e8      	b.n	80044de <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	fbb2 f3f3 	udiv	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004524:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <_PrintUnsigned+0x154>)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff48 	bl	80043c4 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db08      	blt.n	800454e <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 800453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1df      	bne.n	800450c <_PrintUnsigned+0xcc>
 800454c:	e000      	b.n	8004550 <_PrintUnsigned+0x110>
        break;
 800454e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d017      	beq.n	800458a <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d014      	beq.n	800458a <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004560:	e00a      	b.n	8004578 <_PrintUnsigned+0x138>
          FieldWidth--;
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3b01      	subs	r3, #1
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8004568:	2120      	movs	r1, #32
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff2a 	bl	80043c4 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	db07      	blt.n	8004588 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <_PrintUnsigned+0x14a>
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	429a      	cmp	r2, r3
 8004584:	d3ed      	bcc.n	8004562 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8004586:	e000      	b.n	800458a <_PrintUnsigned+0x14a>
            break;
 8004588:	bf00      	nop
}
 800458a:	bf00      	nop
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	08004c38 	.word	0x08004c38

08004598 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bfb8      	it	lt
 80045ac:	425b      	neglt	r3, r3
 80045ae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045b4:	e007      	b.n	80045c6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80045be:	613b      	str	r3, [r7, #16]
    Width++;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	3301      	adds	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	daf3      	bge.n	80045b6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d901      	bls.n	80045da <_PrintInt+0x42>
    Width = NumDigits;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <_PrintInt+0x5e>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db04      	blt.n	80045f0 <_PrintInt+0x58>
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <_PrintInt+0x5e>
    FieldWidth--;
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <_PrintInt+0x6e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01c      	beq.n	8004640 <_PrintInt+0xa8>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b00      	cmp	r3, #0
 800460e:	d117      	bne.n	8004640 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004616:	e00a      	b.n	800462e <_PrintInt+0x96>
        FieldWidth--;
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	3b01      	subs	r3, #1
 800461c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800461e:	2120      	movs	r1, #32
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fecf 	bl	80043c4 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db07      	blt.n	800463e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <_PrintInt+0xa8>
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	429a      	cmp	r2, r3
 800463a:	d3ed      	bcc.n	8004618 <_PrintInt+0x80>
 800463c:	e000      	b.n	8004640 <_PrintInt+0xa8>
          break;
 800463e:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db4a      	blt.n	80046de <_PrintInt+0x146>
    if (v < 0) {
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da07      	bge.n	800465e <_PrintInt+0xc6>
      v = -v;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	425b      	negs	r3, r3
 8004652:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004654:	212d      	movs	r1, #45	; 0x2d
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff feb4 	bl	80043c4 <_StoreChar>
 800465c:	e008      	b.n	8004670 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8004668:	212b      	movs	r1, #43	; 0x2b
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff feaa 	bl	80043c4 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	db32      	blt.n	80046de <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d01f      	beq.n	80046c2 <_PrintInt+0x12a>
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11a      	bne.n	80046c2 <_PrintInt+0x12a>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d117      	bne.n	80046c2 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d014      	beq.n	80046c2 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004698:	e00a      	b.n	80046b0 <_PrintInt+0x118>
            FieldWidth--;
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	3b01      	subs	r3, #1
 800469e:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 80046a0:	2130      	movs	r1, #48	; 0x30
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff fe8e 	bl	80043c4 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db07      	blt.n	80046c0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <_PrintInt+0x12a>
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d3ed      	bcc.n	800469a <_PrintInt+0x102>
 80046be:	e000      	b.n	80046c2 <_PrintInt+0x12a>
              break;
 80046c0:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db09      	blt.n	80046de <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff feb1 	bl	8004440 <_PrintUnsigned>
      }
    }
  }
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0a2      	sub	sp, #136	; 0x88
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 80046f4:	f107 0310 	add.w	r3, r7, #16
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80046fa:	2340      	movs	r3, #64	; 0x40
 80046fc:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 80046fe:	2300      	movs	r3, #0
 8004700:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3301      	adds	r3, #1
 8004716:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 8004718:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 819f 	beq.w	8004a60 <SEGGER_RTT_vprintf+0x378>
      break;
    }
    if (c == '%') {
 8004722:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004726:	2b25      	cmp	r3, #37	; 0x25
 8004728:	f040 818d 	bne.w	8004a46 <SEGGER_RTT_vprintf+0x35e>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800472c:	2300      	movs	r3, #0
 800472e:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 8004730:	2301      	movs	r3, #1
 8004732:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 800473c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004740:	3b23      	subs	r3, #35	; 0x23
 8004742:	2b0d      	cmp	r3, #13
 8004744:	d83e      	bhi.n	80047c4 <SEGGER_RTT_vprintf+0xdc>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <SEGGER_RTT_vprintf+0x64>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	080047b5 	.word	0x080047b5
 8004750:	080047c5 	.word	0x080047c5
 8004754:	080047c5 	.word	0x080047c5
 8004758:	080047c5 	.word	0x080047c5
 800475c:	080047c5 	.word	0x080047c5
 8004760:	080047c5 	.word	0x080047c5
 8004764:	080047c5 	.word	0x080047c5
 8004768:	080047c5 	.word	0x080047c5
 800476c:	080047a5 	.word	0x080047a5
 8004770:	080047c5 	.word	0x080047c5
 8004774:	08004785 	.word	0x08004785
 8004778:	080047c5 	.word	0x080047c5
 800477c:	080047c5 	.word	0x080047c5
 8004780:	08004795 	.word	0x08004795
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	673b      	str	r3, [r7, #112]	; 0x70
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3301      	adds	r3, #1
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	e01a      	b.n	80047ca <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004796:	f043 0302 	orr.w	r3, r3, #2
 800479a:	673b      	str	r3, [r7, #112]	; 0x70
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	3301      	adds	r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	e012      	b.n	80047ca <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80047a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	673b      	str	r3, [r7, #112]	; 0x70
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	e00a      	b.n	80047ca <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80047b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b6:	f043 0308 	orr.w	r3, r3, #8
 80047ba:	673b      	str	r3, [r7, #112]	; 0x70
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	3301      	adds	r3, #1
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	e002      	b.n	80047ca <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 80047c4:	2300      	movs	r3, #0
 80047c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80047c8:	bf00      	nop
        }
      } while (v);
 80047ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1b1      	bne.n	8004734 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80047d0:	2300      	movs	r3, #0
 80047d2:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 80047dc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80047e0:	2b2f      	cmp	r3, #47	; 0x2f
 80047e2:	d912      	bls.n	800480a <SEGGER_RTT_vprintf+0x122>
 80047e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80047e8:	2b39      	cmp	r3, #57	; 0x39
 80047ea:	d80e      	bhi.n	800480a <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 80047f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	461a      	mov	r2, r3
 80047fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004802:	4413      	add	r3, r2
 8004804:	3b30      	subs	r3, #48	; 0x30
 8004806:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 8004808:	e7e4      	b.n	80047d4 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800480a:	2300      	movs	r3, #0
 800480c:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 8004816:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800481a:	2b2e      	cmp	r3, #46	; 0x2e
 800481c:	d11d      	bne.n	800485a <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 800482c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004830:	2b2f      	cmp	r3, #47	; 0x2f
 8004832:	d912      	bls.n	800485a <SEGGER_RTT_vprintf+0x172>
 8004834:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004838:	2b39      	cmp	r3, #57	; 0x39
 800483a:	d80e      	bhi.n	800485a <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	3301      	adds	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8004842:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	461a      	mov	r2, r3
 800484e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004852:	4413      	add	r3, r2
 8004854:	3b30      	subs	r3, #48	; 0x30
 8004856:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 8004858:	e7e4      	b.n	8004824 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 8004862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004866:	2b6c      	cmp	r3, #108	; 0x6c
 8004868:	d003      	beq.n	8004872 <SEGGER_RTT_vprintf+0x18a>
 800486a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800486e:	2b68      	cmp	r3, #104	; 0x68
 8004870:	d107      	bne.n	8004882 <SEGGER_RTT_vprintf+0x19a>
          sFormat++;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	3301      	adds	r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
          c = *sFormat;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c == 'l') || (c == 'h')) {
 8004880:	e7ef      	b.n	8004862 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004882:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004886:	2b25      	cmp	r3, #37	; 0x25
 8004888:	f000 80d1 	beq.w	8004a2e <SEGGER_RTT_vprintf+0x346>
 800488c:	2b25      	cmp	r3, #37	; 0x25
 800488e:	f2c0 80d5 	blt.w	8004a3c <SEGGER_RTT_vprintf+0x354>
 8004892:	2b78      	cmp	r3, #120	; 0x78
 8004894:	f300 80d2 	bgt.w	8004a3c <SEGGER_RTT_vprintf+0x354>
 8004898:	2b58      	cmp	r3, #88	; 0x58
 800489a:	f2c0 80cf 	blt.w	8004a3c <SEGGER_RTT_vprintf+0x354>
 800489e:	3b58      	subs	r3, #88	; 0x58
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f200 80cb 	bhi.w	8004a3c <SEGGER_RTT_vprintf+0x354>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <SEGGER_RTT_vprintf+0x1c4>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080049a3 	.word	0x080049a3
 80048b0:	08004a3d 	.word	0x08004a3d
 80048b4:	08004a3d 	.word	0x08004a3d
 80048b8:	08004a3d 	.word	0x08004a3d
 80048bc:	08004a3d 	.word	0x08004a3d
 80048c0:	08004a3d 	.word	0x08004a3d
 80048c4:	08004a3d 	.word	0x08004a3d
 80048c8:	08004a3d 	.word	0x08004a3d
 80048cc:	08004a3d 	.word	0x08004a3d
 80048d0:	08004a3d 	.word	0x08004a3d
 80048d4:	08004a3d 	.word	0x08004a3d
 80048d8:	08004931 	.word	0x08004931
 80048dc:	08004957 	.word	0x08004957
 80048e0:	08004a3d 	.word	0x08004a3d
 80048e4:	08004a3d 	.word	0x08004a3d
 80048e8:	08004a3d 	.word	0x08004a3d
 80048ec:	08004a3d 	.word	0x08004a3d
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004a3d 	.word	0x08004a3d
 80048f8:	08004a3d 	.word	0x08004a3d
 80048fc:	08004a3d 	.word	0x08004a3d
 8004900:	08004a3d 	.word	0x08004a3d
 8004904:	08004a3d 	.word	0x08004a3d
 8004908:	08004a3d 	.word	0x08004a3d
 800490c:	08004a09 	.word	0x08004a09
 8004910:	08004a3d 	.word	0x08004a3d
 8004914:	08004a3d 	.word	0x08004a3d
 8004918:	080049c9 	.word	0x080049c9
 800491c:	08004a3d 	.word	0x08004a3d
 8004920:	0800497d 	.word	0x0800497d
 8004924:	08004a3d 	.word	0x08004a3d
 8004928:	08004a3d 	.word	0x08004a3d
 800492c:	080049a3 	.word	0x080049a3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	1d19      	adds	r1, r3, #4
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 800493e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004940:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 8004944:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fd38 	bl	80043c4 <_StoreChar>
        break;
 8004954:	e073      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	1d19      	adds	r1, r3, #4
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6011      	str	r1, [r2, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004964:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004972:	220a      	movs	r2, #10
 8004974:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004976:	f7ff fe0f 	bl	8004598 <_PrintInt>
        break;
 800497a:	e060      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      case 'u':
        v = va_arg(*pParamList, int);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	1d19      	adds	r1, r3, #4
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800498a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800498c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499a:	220a      	movs	r2, #10
 800499c:	f7ff fd50 	bl	8004440 <_PrintUnsigned>
        break;
 80049a0:	e04d      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	1d19      	adds	r1, r3, #4
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6011      	str	r1, [r2, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80049b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80049b2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80049b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c0:	2210      	movs	r2, #16
 80049c2:	f7ff fd3d 	bl	8004440 <_PrintUnsigned>
        break;
 80049c6:	e03a      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1d19      	adds	r1, r3, #4
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6011      	str	r1, [r2, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	66bb      	str	r3, [r7, #104]	; 0x68
          do {
            c = *s;
 80049d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80049de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049e0:	3301      	adds	r3, #1
 80049e2:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80049e4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <SEGGER_RTT_vprintf+0x31c>
              break;
            }
           _StoreChar(&BufferDesc, c);
 80049ec:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80049f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80049f4:	4611      	mov	r1, r2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fce4 	bl	80043c4 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 80049fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dae9      	bge.n	80049d6 <SEGGER_RTT_vprintf+0x2ee>
        }
        break;
 8004a02:	e01c      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
              break;
 8004a04:	bf00      	nop
        break;
 8004a06:	e01a      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      case 'p':
        v = va_arg(*pParamList, int);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	1d19      	adds	r1, r3, #4
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6011      	str	r1, [r2, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8004a16:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a18:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2308      	movs	r3, #8
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2308      	movs	r3, #8
 8004a26:	2210      	movs	r2, #16
 8004a28:	f7ff fd0a 	bl	8004440 <_PrintUnsigned>
        break;
 8004a2c:	e007      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a32:	2125      	movs	r1, #37	; 0x25
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fcc5 	bl	80043c4 <_StoreChar>
        break;
 8004a3a:	e000      	b.n	8004a3e <SEGGER_RTT_vprintf+0x356>
      default:
        break;
 8004a3c:	bf00      	nop
      }
      sFormat++;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e007      	b.n	8004a56 <SEGGER_RTT_vprintf+0x36e>
    } else {
      _StoreChar(&BufferDesc, c);
 8004a46:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fcb7 	bl	80043c4 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8004a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f6bf ae56 	bge.w	800470a <SEGGER_RTT_vprintf+0x22>
 8004a5e:	e000      	b.n	8004a62 <SEGGER_RTT_vprintf+0x37a>
      break;
 8004a60:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dd0d      	ble.n	8004a84 <SEGGER_RTT_vprintf+0x39c>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8004a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <SEGGER_RTT_vprintf+0x394>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8004a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a70:	f107 0310 	add.w	r3, r7, #16
 8004a74:	4619      	mov	r1, r3
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fc80 	bl	800437c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a80:	4413      	add	r3, r2
 8004a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8004a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3780      	adds	r7, #128	; 0x80
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop

08004a90 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8004a90:	b40e      	push	{r1, r2, r3}
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8004a9a:	f107 0320 	add.w	r3, r7, #32
 8004a9e:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	69f9      	ldr	r1, [r7, #28]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fe1d 	bl	80046e8 <SEGGER_RTT_vprintf>
 8004aae:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004abc:	b003      	add	sp, #12
 8004abe:	4770      	bx	lr

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	4d0c      	ldr	r5, [pc, #48]	; (8004af8 <__libc_init_array+0x38>)
 8004ac6:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac8:	1b64      	subs	r4, r4, r5
 8004aca:	10a4      	asrs	r4, r4, #2
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	f000 f830 	bl	8004b34 <_init>
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	4d0a      	ldr	r5, [pc, #40]	; (8004b00 <__libc_init_array+0x40>)
 8004ad8:	4c0a      	ldr	r4, [pc, #40]	; (8004b04 <__libc_init_array+0x44>)
 8004ada:	1b64      	subs	r4, r4, r5
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08004c50 	.word	0x08004c50
 8004afc:	08004c50 	.word	0x08004c50
 8004b00:	08004c50 	.word	0x08004c50
 8004b04:	08004c54 	.word	0x08004c54

08004b08 <memcpy>:
 8004b08:	440a      	add	r2, r1
 8004b0a:	4291      	cmp	r1, r2
 8004b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b10:	d100      	bne.n	8004b14 <memcpy+0xc>
 8004b12:	4770      	bx	lr
 8004b14:	b510      	push	{r4, lr}
 8004b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b20:	d1f9      	bne.n	8004b16 <memcpy+0xe>
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <memset>:
 8004b24:	4603      	mov	r3, r0
 8004b26:	4402      	add	r2, r0
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memset+0xa>
 8004b2c:	4770      	bx	lr
 8004b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b32:	e7f9      	b.n	8004b28 <memset+0x4>

08004b34 <_init>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr

08004b40 <_fini>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr
